/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.arjjs.ccm.modules.ccm.org.web;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.arjjs.ccm.common.beanvalidator.BeanValidators;
import com.arjjs.ccm.common.config.Global;
import com.arjjs.ccm.common.persistence.Page;
import com.arjjs.ccm.common.web.BaseController;
import com.arjjs.ccm.common.utils.DateUtils;
import com.arjjs.ccm.common.utils.StringUtils;
import com.arjjs.ccm.common.utils.excel.ExportExcel;
import com.arjjs.ccm.common.utils.excel.ImportExcel;
import com.arjjs.ccm.modules.ccm.log.entity.CcmLogTail;
import com.arjjs.ccm.modules.ccm.log.service.CcmLogTailService;
import com.arjjs.ccm.modules.ccm.org.entity.CcmOrgSocialorg;
import com.arjjs.ccm.modules.ccm.org.service.CcmOrgSocialorgService;

import net.sf.json.JSONArray;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy;

/**
 * 社会组织Controller
 * @author fuxinshuang
 * @version 2018-01-26
 */
@Controller
@RequestMapping(value = "${adminPath}/org/ccmOrgSocialorg")
public class CcmOrgSocialorgController extends BaseController {

	@Autowired
	private CcmOrgSocialorgService ccmOrgSocialorgService;
	
	@Autowired
	private CcmLogTailService ccmLogTailService;
	@ModelAttribute
	public CcmOrgSocialorg get(@RequestParam(required=false) String id) {
		CcmOrgSocialorg entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ccmOrgSocialorgService.get(id);
		}
		if (entity == null){
			entity = new CcmOrgSocialorg();
		}
		return entity;
	}
	
	@RequiresPermissions("org:ccmOrgSocialorg:view")
	@RequestMapping(value = {"list", ""})
	public String list(CcmOrgSocialorg ccmOrgSocialorg, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<CcmOrgSocialorg> page = ccmOrgSocialorgService.findPage(new Page<CcmOrgSocialorg>(request, response), ccmOrgSocialorg); 
		model.addAttribute("page", page);
		return "ccm/org/ccmOrgSocialorgList";
	}

	@RequiresPermissions("org:ccmOrgSocialorg:view")
	@RequestMapping(value = "form")
	public String form(CcmOrgSocialorg ccmOrgSocialorg, Model model) {
		// 创建 查询对象 建立查询条件
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmOrgSocialorg.getId());
		ccmLogTailDto.setRelevanceTable("ccm_org_socialorg");
		List<CcmLogTail > ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
		// 返回查询结果
		JsonConfig config = new JsonConfig();
		config.setExcludes(new String[]{"createBy","updateBy","currentUser","dbName","global","page","createDate","updateDate","sqlMap"});
		config.setIgnoreDefaultExcludes(false);  //设置默认忽略
		config.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		String jsonDocumentList = JSONArray.fromObject(ccmLogTailList,config).toString(); 
		model.addAttribute("documentList", jsonDocumentList);
		model.addAttribute("documentNumber", ccmLogTailList.size());
		
		model.addAttribute("ccmLogTailList", ccmLogTailList);				
		model.addAttribute("ccmOrgSocialorg", ccmOrgSocialorg);
		return "ccm/org/ccmOrgSocialorgForm";
	}

	@RequiresPermissions("org:ccmOrgSocialorg:edit")
	@RequestMapping(value = "save")
	public String save(CcmOrgSocialorg ccmOrgSocialorg, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmOrgSocialorg)){
			return form(ccmOrgSocialorg, model);
		}
		ccmOrgSocialorgService.save(ccmOrgSocialorg);
		addMessage(redirectAttributes, "保存社会组织成功");
		return "redirect:"+Global.getAdminPath()+"/org/ccmOrgSocialorg/?repage";
	}
	
	@RequiresPermissions("org:ccmOrgSocialorg:edit")
	@RequestMapping(value = "delete")
	public String delete(CcmOrgSocialorg ccmOrgSocialorg, RedirectAttributes redirectAttributes) {
		ccmOrgSocialorgService.delete(ccmOrgSocialorg);
		addMessage(redirectAttributes, "删除社会组织成功");
		return "redirect:"+Global.getAdminPath()+"/org/ccmOrgSocialorg/?repage";
	}
	
	/**
	 * 导出社会组织数据
	 * 
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("org:ccmOrgSocialorg:view")
	@RequestMapping(value = "export", method = RequestMethod.POST)
	public String exportFile(CcmOrgSocialorg ccmOrgSocialorg, HttpServletRequest request, HttpServletResponse response,
			RedirectAttributes redirectAttributes) {
		try {
			String fileName = "社会组织数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			List<CcmOrgSocialorg> list = ccmOrgSocialorgService.findList(ccmOrgSocialorg);
			new ExportExcel("社会组织数据", CcmOrgSocialorg.class).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出社会组织失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/org/ccmOrgSocialorg/?repage";
	}

	/**
	 * 导入社会组织数据
	 * 
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("org:ccmOrgSocialorg:view")
	@RequestMapping(value = "import", method = RequestMethod.POST)
	public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + adminPath + "/org/ccmOrgSocialorg/?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<CcmOrgSocialorg> list = ei.getDataList(CcmOrgSocialorg.class);
			for (CcmOrgSocialorg OrgSocialorg : list) {
				try {
					
					 BeanValidators.validateWithException(validator, OrgSocialorg);

					 ccmOrgSocialorgService.save(OrgSocialorg);
					 successNum++;
				} catch (ConstraintViolationException ex) {
					failureMsg.append("<br/>社会组织名 " + OrgSocialorg.getCreditCode() + " 导入失败：");
					List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(ex, ": ");
					for (String message : messageList) {
						failureMsg.append(message + "; ");
						failureNum++;
					}
				} catch (Exception ex) {
					failureMsg.append("<br/>登录名 " + OrgSocialorg.getCreditCode()+ " 导入失败：" + ex.getMessage());
				}
			}
			if (failureNum > 0) {
				failureMsg.insert(0, "，失败 " + failureNum + " 条社会组织，导入信息如下：");
			}
			addMessage(redirectAttributes, "已成功导入 " + successNum + " 条社会组织" + failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入社会组织失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/org/ccmOrgSocialorg/?repage";
	}


}