/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.arjjs.ccm.modules.ccm.ccmsys.web;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.arjjs.ccm.common.beanvalidator.BeanValidators;
import com.arjjs.ccm.common.config.Global;
import com.arjjs.ccm.common.persistence.Page;
import com.arjjs.ccm.common.web.BaseController;
import com.arjjs.ccm.common.utils.DateUtils;
import com.arjjs.ccm.common.utils.StringUtils;
import com.arjjs.ccm.common.utils.excel.ExportExcel;
import com.arjjs.ccm.common.utils.excel.ImportExcel;
import com.arjjs.ccm.modules.ccm.ccmsys.entity.CcmDevice;
import com.arjjs.ccm.modules.ccm.ccmsys.service.CcmDeviceService;

/**
 * 设备管理Controller
 * @author arj
 * @version 2018-01-25
 */
@Controller
@RequestMapping(value = "${adminPath}/ccmsys/ccmDevice")
public class CcmDeviceController extends BaseController {

	@Autowired
	private CcmDeviceService ccmDeviceService;
	
	@ModelAttribute
	public CcmDevice get(@RequestParam(required=false) String id) {
		CcmDevice entity = null;
		if (StringUtils.isNotBlank(id)){
			entity = ccmDeviceService.get(id);
		}
		if (entity == null){
			entity = new CcmDevice();
		}
		return entity;
	}
	
	@RequiresPermissions("ccmsys:ccmDevice:view")
	@RequestMapping(value = {"list", ""})
	public String list(CcmDevice ccmDevice, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<CcmDevice> page = ccmDeviceService.findPage(new Page<CcmDevice>(request, response), ccmDevice); 
		model.addAttribute("page", page);
		return "ccm/ccmsys/ccmDeviceList";
	}

	@RequiresPermissions("ccmsys:ccmDevice:view")
	@RequestMapping(value = "form")
	public String form(CcmDevice ccmDevice, Model model) {
		model.addAttribute("ccmDevice", ccmDevice);
		return "ccm/ccmsys/ccmDeviceForm";
	}

	@RequiresPermissions("ccmsys:ccmDevice:edit")
	@RequestMapping(value = "save")
	public String save(CcmDevice ccmDevice, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmDevice)){
			return form(ccmDevice, model);
		}
		ccmDeviceService.save(ccmDevice);
		addMessage(redirectAttributes, "保存设备成功");
		return "redirect:"+Global.getAdminPath()+"/ccmsys/ccmDevice/?repage";
	}
	
	@RequiresPermissions("ccmsys:ccmDevice:edit")
	@RequestMapping(value = "delete")
	public String delete(CcmDevice ccmDevice, RedirectAttributes redirectAttributes) {
		ccmDeviceService.delete(ccmDevice);
		addMessage(redirectAttributes, "删除设备成功");
		return "redirect:"+Global.getAdminPath()+"/ccmsys/ccmDevice/?repage";
	}
	
	//首页地图弹页面显示摄像机
	@RequiresPermissions("ccmsys:ccmDevice:view")
	@RequestMapping(value = "getDeviceMap")
	public String getDeviceMap(CcmDevice ccmDevice, Model model) {
		model.addAttribute("ccmDevice", ccmDevice);
		return "ccm/ccmsys/ccmDeviceFormMap";
	}
	/**
	 * 导出网络设备数据
	 * 
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("ccmsys:ccmDevice:view")
	@RequestMapping(value = "export", method = RequestMethod.POST)
	public String exportFile(CcmDevice ccmDevice, HttpServletRequest request,
			HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = "网络设备数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			List<CcmDevice> list = ccmDeviceService.findList(ccmDevice);
			System.out.println(list.size());
			new ExportExcel("网络设备数据", CcmDevice.class).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出网络设备数据失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/ccmsys/ccmDevice/?repage";
	}

	/**
	 * 导入网络设备数据
	 * 
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("ccmsys:ccmDevice:view")
	@RequestMapping(value = "import", method = RequestMethod.POST)
	public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + adminPath + "/ccmsys/ccmDevice/?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<CcmDevice> list = ei.getDataList(CcmDevice.class);
			for (CcmDevice ccmDevice : list) {
				try {

					BeanValidators.validateWithException(validator, ccmDevice);
					ccmDeviceService.save(ccmDevice);
					successNum++;
				} catch (ConstraintViolationException ex) {
					failureMsg.append("<br/>网络设备类型 " + ccmDevice.getName() + " 导入失败：");
					List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(ex, ": ");
					for (String message : messageList) {
						failureMsg.append(message + "; ");
						failureNum++;
					}
				} catch (Exception ex) {
					failureMsg.append("<br/>登录名 " + ccmDevice.getName() + " 导入失败：" + ex.getMessage());
				}
			}
			if (failureNum > 0) {
				failureMsg.insert(0, "，失败 " + failureNum + " 条网络设备，导入信息如下：");
			}
			addMessage(redirectAttributes, "已成功导入 " + successNum + " 条网络设备" + failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入网络设备数据失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/ccmsys/ccmDevice/?repage";
	}

}