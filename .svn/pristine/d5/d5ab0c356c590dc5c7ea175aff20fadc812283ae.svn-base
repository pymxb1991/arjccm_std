/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.arjjs.ccm.modules.ccm.house.web;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.ibatis.annotations.Param;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.arjjs.ccm.common.beanvalidator.BeanValidators;
import com.arjjs.ccm.common.config.Global;
import com.arjjs.ccm.common.persistence.Page;
import com.arjjs.ccm.common.web.BaseController;
import com.arjjs.ccm.common.utils.DateUtils;
import com.arjjs.ccm.common.utils.StringUtils;
import com.arjjs.ccm.common.utils.excel.ExportExcel;
import com.arjjs.ccm.common.utils.excel.ImportExcel;
import com.arjjs.ccm.modules.ccm.house.entity.CcmHouseRelease;
import com.arjjs.ccm.modules.ccm.house.service.CcmHouseReleaseService;
import com.arjjs.ccm.modules.ccm.log.entity.CcmLogTail;
import com.arjjs.ccm.modules.ccm.log.service.CcmLogTailService;
import com.arjjs.ccm.modules.ccm.pop.entity.CcmPeople;
import com.arjjs.ccm.modules.ccm.pop.service.CcmPeopleService;
import com.arjjs.ccm.modules.sys.entity.User;
import com.arjjs.ccm.modules.sys.utils.UserUtils;
import com.arjjs.ccm.tool.CommUtil;

import net.sf.json.JSONArray;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy;

/**
 * 安置帮教人员Controller
 * 
 * @author arj
 * @version 2018-01-04
 */
@Controller
@RequestMapping(value = "${adminPath}/house/ccmHouseRelease")
public class CcmHouseReleaseController extends BaseController {

	@Autowired
	private CcmHouseReleaseService ccmHouseReleaseService;
	@Autowired
	private CcmPeopleService ccmPeopleService;
	@Autowired
	private CcmLogTailService ccmLogTailService;

	@ModelAttribute
	public CcmHouseRelease get(@RequestParam(value = "id", required = false) String id,
			@RequestParam(value = "peopleId", required = false) String peopleId) {
		CcmHouseRelease entity = null;

		if (StringUtils.isNotBlank(id)) {
			entity = ccmHouseReleaseService.get(id);
		} else if (StringUtils.isNotBlank(peopleId)) {
			entity = ccmHouseReleaseService.getPeopleALL(peopleId);
		}
		if (entity == null) {
			entity = new CcmHouseRelease();
			// 如果 peopleId 不为空 则 添加该ID
			if (StringUtils.isNotBlank(peopleId)) {
				entity.setPeopleId(peopleId);
			}
		}
		return entity;
	}

	/**
	 * @see 列表页
	 * @param ccmHouseRelease
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping(value = { "list", "" })
	public String list(@Param("tableType")String tableType,CcmHouseRelease ccmHouseRelease, HttpServletRequest request, HttpServletResponse response,
			Model model) {
//		Page<CcmHouseRelease> page = ccmHouseReleaseService.findPage(new Page<CcmHouseRelease>(request, response),
//				ccmHouseRelease);
//		model.addAttribute("page", page);

		Page<CcmHouseRelease> page = new Page();
		String permissionKey = request.getParameter("permissionKey");
		User user = UserUtils.getUser();
		if (user != null && "1".equals(user.getHasPermission()) ) {//有涉密权限
			page = ccmHouseReleaseService.findPage(new Page<CcmHouseRelease>(request, response), ccmHouseRelease);
		} else if (user != null && "0".equals(user.getHasPermission())) {//无涉密权限
			if (user.getPermissionKey() != null && user.getPermissionKey().equals(permissionKey)) {
				page = ccmHouseReleaseService.findPage(new Page<CcmHouseRelease>(request, response), ccmHouseRelease);
			} else {
				model.addAttribute("message", "涉密权限不正确！");
			}
		}
		model.addAttribute("page", page);
		model.addAttribute("permissionKey", permissionKey);
		if(StringUtils.isBlank(tableType)) {
			return "ccm/house/ccmHouseReleaseList";
		}else {
			return "ccm/house/emphasis/ccmHouseReleaseList";
		}
	}

	/**
	 * @see  管理 - 更新表单页面
	 * @param ccmHouseRelease
	 * @param model
	 * @return
	 */
	@RequiresPermissions("house:ccmHouseRelease:view")
	@RequestMapping(value = "form")
	public String form(CcmHouseRelease ccmHouseRelease, Model model) {
		// 创建 查询对象 建立查询条件
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmHouseRelease.getId());
		ccmLogTailDto.setRelevanceTable("ccm_house_release");
		List<CcmLogTail > ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
		// 返回查询结果
		JsonConfig config = new JsonConfig();
		config.setExcludes(new String[]{"createBy","updateBy","currentUser","dbName","global","page","createDate","updateDate","sqlMap"});
		config.setIgnoreDefaultExcludes(false);  //设置默认忽略
		config.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		String jsonDocumentList = JSONArray.fromObject(ccmLogTailList,config).toString(); 
		model.addAttribute("documentList", jsonDocumentList);
		model.addAttribute("documentNumber", ccmLogTailList.size());
		
		model.addAttribute("ccmLogTailList", ccmLogTailList);
		model.addAttribute("ccmHouseRelease", ccmHouseRelease);
		return "ccm/house/ccmHouseReleaseForm";
	}

	/**
	 * @see 管理 更新操作
	 * @param ccmHouseRelease
	 * @param model
	 * @param redirectAttributes
	 * @return
	 * @throws IOException 
	 */
	@RequiresPermissions("house:ccmHouseRelease:edit")
	@RequestMapping(value = "save")
	public void save(HttpServletRequest request, HttpServletResponse response, CcmHouseRelease ccmHouseRelease, Model model, RedirectAttributes redirectAttributes) throws IOException {
		if (!beanValidator(model, ccmHouseRelease)) {
//			return form(ccmHouseRelease, model);
		}
		ccmHouseReleaseService.save(ccmHouseRelease);
		// 更新 当前人 是 安置帮教人员
		CcmPeople ccmPop = ccmPeopleService.get(ccmHouseRelease.getPeopleId());
		if(ccmPop!=null){
			ccmPop.setIsRelease(1);
			ccmPeopleService.save(ccmPop);
		}
		addMessage(redirectAttributes, "保存安置帮教人员成功");
//		return "redirect:" + Global.getAdminPath() + "/house/ccmHouseRelease/?repage";

		PrintWriter out = response.getWriter();
		CommUtil.openWinExpDiv(out, "保存安置帮教人员成功");
	}

	/**
	 * @see 人员标记登记 操作
	 * @param ccmHouseRelease
	 * @param model
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("house:ccmHouseRelease:edit")
	@RequestMapping(value = "savePop")
	public String savePop(CcmHouseRelease ccmHouseRelease, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmHouseRelease)) {
			return form(ccmHouseRelease, model);
		}
		ccmHouseReleaseService.save(ccmHouseRelease);
		// 更新 当前人 是 安置帮教人员
		CcmPeople ccmPop = ccmPeopleService.get(ccmHouseRelease.getPeopleId());
		if(ccmPop!=null){
			ccmPop.setIsRelease(1);
			ccmPeopleService.save(ccmPop);
		}
		
		addMessage(redirectAttributes, "保存安置帮教人员成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/?repage";
	}

	/**
	 * @see 删除操作
	 * @param ccmHouseRelease
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("house:ccmHouseRelease:edit")
	@RequestMapping(value = "delete")
	public String delete(HttpServletRequest request, CcmHouseRelease ccmHouseRelease, RedirectAttributes redirectAttributes) {
		ccmHouseReleaseService.delete(ccmHouseRelease);
		// 更新 当前人 是 安置帮教人员
		CcmPeople ccmPop = ccmPeopleService.get(ccmHouseRelease.getPeopleId());
		String permissionKey = request.getParameter("permissionKey");
		if(ccmPop!=null){
			ccmPop.setIsRelease(0);
			ccmPeopleService.save(ccmPop);
		}
		
		addMessage(redirectAttributes, "删除安置帮教人员成功");
		return "redirect:" + Global.getAdminPath() + "/house/ccmHouseRelease/?repage&permissionKey=" + permissionKey;
	}
	
	/**
	 * @see 人员标记 登记跳转页面
	 * @param ccmPeople
	 * @param model
	 * @return
	 */
	@RequiresPermissions("house:ccmHouseRelease:view")
	@RequestMapping(value = "specialform")
	public String specialform(CcmPeople ccmPeople, Model model) {
		model.addAttribute("ccmPeople", ccmPeople);
		CcmHouseRelease Release = ccmHouseReleaseService.getPeopleALL(ccmPeople.getId());
		if (Release == null){
			Release = new CcmHouseRelease();
		}
		model.addAttribute("ccmHouseRelease", Release);
		return "/ccm/house/pop/ccmHousePoPReleaseForm";
	}
	
	/**
	 * 导出安置帮教人员数据
	 * 
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("house:ccmHouseRelease:view")
	@RequestMapping(value = "export", method = RequestMethod.POST)
	public String exportFile(CcmHouseRelease ccmHouseRelease, HttpServletRequest request,
			HttpServletResponse response, RedirectAttributes redirectAttributes) {
		try {
			String fileName = "安置帮教人员数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";

			List<CcmHouseRelease> list = new ArrayList<CcmHouseRelease>();
			String permissionKey = request.getParameter("permissionKey");
			User user = UserUtils.getUser();
			if (user != null && "1".equals(user.getHasPermission())) {//有涉密权限
				list = ccmHouseReleaseService.findList(ccmHouseRelease);
			} else if (user != null && "0".equals(user.getHasPermission())) {//无涉密权限
				if (user.getPermissionKey() != null && user.getPermissionKey().equals(permissionKey)) {
					list = ccmHouseReleaseService.findList(ccmHouseRelease);
				}
			}
			
//			List<CcmHouseRelease> list = ccmHouseReleaseService.findList(ccmHouseRelease);
			new ExportExcel("安置帮教人员数据", CcmHouseRelease.class).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出安置帮教人员失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/house/ccmHouseRelease/?repage";
	}

	/**
	 * 导入安置帮教人员数据
	 * 
	 * @param file
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("house:ccmHouseRelease:view")
	@RequestMapping(value = "import", method = RequestMethod.POST)
	public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + adminPath + "/house/ccmHouseRelease/?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<CcmHouseRelease> list = ei.getDataList(CcmHouseRelease.class);
			for (CcmHouseRelease HouseRelease : list) {
				try {

					BeanValidators.validateWithException(validator, HouseRelease);
					CcmHouseRelease HouseReleaseFind =  ccmHouseReleaseService.getPeopleALL(HouseRelease.getPeopleId());
					if(HouseReleaseFind == null){
						CcmPeople ccmPop = ccmPeopleService.get(HouseRelease.getPeopleId());
						ccmPop.setIsRelease(1);
						ccmPeopleService.save(ccmPop);
						ccmHouseReleaseService.save(HouseRelease);
						successNum++;
					}else{
						failureMsg.append("<br/>安置帮教人员名 " + HouseRelease.getName() + " 导入失败：记录已存在");
					}
				} catch (ConstraintViolationException ex) {
					failureMsg.append("<br/>安置帮教人员名 " + HouseRelease.getName() + " 导入失败：");
					List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(ex, ": ");
					for (String message : messageList) {
						failureMsg.append(message + "; ");
						failureNum++;
					}
				} catch (Exception ex) {
					failureMsg.append("<br/>登录名 " + HouseRelease.getName() + " 导入失败：" + ex.getMessage());
				}
			}
			if (failureNum > 0) {
				failureMsg.insert(0, "，失败 " + failureNum + " 条安置帮教人员，导入信息如下：");
			}
			addMessage(redirectAttributes, "已成功导入 " + successNum + " 条安置帮教人员" + failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入安置帮教人员失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/house/ccmHouseRelease/?repage";
	}
	 

}