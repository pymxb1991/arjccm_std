/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.arjjs.ccm.modules.ccm.sys.web;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.arjjs.ccm.common.config.Global;
import com.arjjs.ccm.common.persistence.Page;
import com.arjjs.ccm.common.web.BaseController;
import com.arjjs.ccm.common.utils.StringUtils;
import com.arjjs.ccm.modules.ccm.log.entity.CcmLogTail;
import com.arjjs.ccm.modules.ccm.log.service.CcmLogTailService;
import com.arjjs.ccm.modules.ccm.sys.entity.CcmWorkReport;
import com.arjjs.ccm.modules.ccm.sys.service.CcmWorkReportService;
import com.arjjs.ccm.modules.sys.utils.UserUtils;

/**
 * 工作日志Controller
 * 
 * @author arj
 * @version 2018-03-08
 */
@Controller
@RequestMapping(value = "${adminPath}/sys/ccmWorkReport")
public class CcmWorkReportController extends BaseController {

	@Autowired
	private CcmWorkReportService ccmWorkReportService;
	@Autowired
	private CcmLogTailService ccmLogTailService;

	@ModelAttribute
	public CcmWorkReport get(@RequestParam(required = false) String id) {
		CcmWorkReport entity = null;
		if (StringUtils.isNotBlank(id)) {
			entity = ccmWorkReportService.get(id);
		}
		if (entity == null) {
			entity = new CcmWorkReport();
		}
		return entity;
	}

	@RequiresPermissions("sys:ccmWorkReport:view")
	@RequestMapping(value = { "list", "" })
	public String list(CcmWorkReport ccmWorkReport, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		ccmWorkReport.setCreateBy(UserUtils.getUser());
		Page<CcmWorkReport> page = ccmWorkReportService.findPage(new Page<CcmWorkReport>(request, response),
				ccmWorkReport);
		model.addAttribute("page", page);
		return "ccm/sys/ccmWorkReportList";
	}

	@RequiresPermissions("sys:ccmWorkReport:view")
	@RequestMapping(value = "form")
	public String form(CcmWorkReport ccmWorkReport, Model model) {
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmWorkReport.getId());
		ccmLogTailDto.setRelevanceTable("ccm_sys_workreport");
		List<CcmLogTail> ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
		// 返回查询结果
		model.addAttribute("ccmLogTailList", ccmLogTailList);
		if (StringUtils.isNotEmpty(ccmWorkReport.getId())) {
			ccmWorkReport = ccmWorkReportService.getRecordList(ccmWorkReport);
		}
		model.addAttribute("ccmWorkReport", ccmWorkReport);
		model.addAttribute("viewRep", "01");
		return "ccm/sys/ccmWorkReportForm";
	}

	@RequiresPermissions("sys:ccmWorkReport:edit")
	@RequestMapping(value = "save")
	public String save(CcmWorkReport ccmWorkReport, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmWorkReport)) {
			return form(ccmWorkReport, model);
		}
		// 如果是修改，则状态为已发布，则不能再进行操作
		if (StringUtils.isNotBlank(ccmWorkReport.getId())) {
			CcmWorkReport e = ccmWorkReportService.get(ccmWorkReport.getId());
			if ("1".equals(e.getStatus())) {
				addMessage(redirectAttributes, "已发布，不能操作！");
				return "redirect:" + adminPath + "/sys/ccmWorkReport/form?id=" + ccmWorkReport.getId();
			}
		}
		// 判断是否过期 dt1.getTime() > dt2.getTime()
		Date dt1 = new Date();
		Date dt2 = ccmWorkReport.getEndDate();
		if (dt1.getTime() > dt2.getTime()) {
			ccmWorkReport.setStatus("1");
		} else {
			ccmWorkReport.setStatus("0");
		}
		ccmWorkReportService.save(ccmWorkReport);
		addMessage(redirectAttributes, "保存工作日志成功");
		return "redirect:" + Global.getAdminPath() + "/sys/ccmWorkReport/?repage";
	}

	@RequiresPermissions("sys:ccmWorkReport:edit")
	@RequestMapping(value = "delete")
	public String delete(CcmWorkReport ccmWorkReport, RedirectAttributes redirectAttributes) {
		ccmWorkReportService.delete(ccmWorkReport);
		addMessage(redirectAttributes, "删除工作日志成功");
		return "redirect:" + Global.getAdminPath() + "/sys/ccmWorkReport/?repage";
	}

	/**
	 * 我的工作日志记录
	 */
	@RequestMapping(value = "self")
	public String selfList(CcmWorkReport ccmWorkReport, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		ccmWorkReport.setSelf(true);
		Page<CcmWorkReport> page = ccmWorkReportService.findPage(new Page<CcmWorkReport>(request, response),
				ccmWorkReport);
		model.addAttribute("page", page);
		return "ccm/sys/ccmWorkReportReadList";
	}

	/**
	 * 我的通知列表-数据
	 */
	@RequiresPermissions("oa:ccmWorkReport:view")
	@RequestMapping(value = "selfData")
	@ResponseBody
	public Page<CcmWorkReport> listData(CcmWorkReport ccmWorkReport, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		ccmWorkReport.setSelf(true);
		Page<CcmWorkReport> page = ccmWorkReportService.findPage(new Page<CcmWorkReport>(request, response),
				ccmWorkReport);
		return page;
	}

	/**
	 * 查看我的通知
	 */
	@RequestMapping(value = "view")
	public String view(CcmWorkReport ccmWorkReport, Model model) {
		model.addAttribute("viewRep", "02");
		if (StringUtils.isNotBlank(ccmWorkReport.getId())) {
			CcmLogTail ccmLogTailDto = new CcmLogTail();
			ccmLogTailDto.setRelevanceId(ccmWorkReport.getId());
			ccmLogTailDto.setRelevanceTable("ccm_sys_workreport");
			List<CcmLogTail> ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
			// 返回查询结果
			model.addAttribute("ccmLogTailList", ccmLogTailList);
			ccmWorkReportService.updateReadFlag(ccmWorkReport);
			ccmWorkReport = ccmWorkReportService.getRecordList(ccmWorkReport);
			model.addAttribute("ccmWorkReport", ccmWorkReport);

			return "/ccm/sys/ccmWorkReportForm";
		}
		return "redirect:" + adminPath + "/sys/ccmWorkReport/self?repage";
	}

	/**
	 * 查看我的通知-数据
	 */
	@RequestMapping(value = "viewData")
	@ResponseBody
	public CcmWorkReport viewData(CcmWorkReport ccmWorkReport, Model model) {
		if (StringUtils.isNotBlank(ccmWorkReport.getId())) {
			ccmWorkReportService.updateReadFlag(ccmWorkReport);
			return ccmWorkReport;
		}
		return null;
	}

	/**
	 * 查看我的通知-发送记录
	 */
	@RequestMapping(value = "viewRecordData")
	@ResponseBody
	public CcmWorkReport viewRecordData(CcmWorkReport ccmWorkReport, Model model) {
		if (StringUtils.isNotBlank(ccmWorkReport.getId())) {
			ccmWorkReport = ccmWorkReportService.getRecordList(ccmWorkReport);
			return ccmWorkReport;
		}
		return null;
	}

	/**
	 * 获取我的通知数目
	 */
	@RequestMapping(value = "self/count")
	@ResponseBody
	public String selfCount(CcmWorkReport ccmWorkReport, Model model) {
		ccmWorkReport.setSelf(true);
		ccmWorkReport.setReadFlag("0");
		return String.valueOf(ccmWorkReportService.findCount(ccmWorkReport));
	}

}