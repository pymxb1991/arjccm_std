/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.arjjs.ccm.modules.ccm.pop.web;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolationException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.arjjs.ccm.common.beanvalidator.BeanValidators;
import com.arjjs.ccm.common.config.Global;
import com.arjjs.ccm.common.persistence.Page;
import com.arjjs.ccm.common.utils.DateUtils;
import com.arjjs.ccm.common.utils.StringUtils;
import com.arjjs.ccm.common.utils.excel.ExportExcel;
import com.arjjs.ccm.common.utils.excel.ImportExcel;
import com.arjjs.ccm.common.web.BaseController;
import com.arjjs.ccm.modules.ccm.cpp.dao.CppPopPopDao;
import com.arjjs.ccm.modules.ccm.cpp.dao.CppPopVehileDao;
import com.arjjs.ccm.modules.ccm.cpp.entity.CppPopPop;
import com.arjjs.ccm.modules.ccm.cpp.entity.CppPopVehile;
import com.arjjs.ccm.modules.ccm.house.entity.CcmHarmNationalSecurity;
import com.arjjs.ccm.modules.ccm.house.entity.CcmHouseBuildmanage;
import com.arjjs.ccm.modules.ccm.house.entity.CcmHouseDispute;
import com.arjjs.ccm.modules.ccm.house.entity.CcmHouseDrugs;
import com.arjjs.ccm.modules.ccm.house.entity.CcmHouseEscape;
import com.arjjs.ccm.modules.ccm.house.entity.CcmSeriousCriminalOffense;
import com.arjjs.ccm.modules.ccm.house.service.CcmHarmNationalSecurityService;
import com.arjjs.ccm.modules.ccm.house.service.CcmHouseBuildmanageService;
import com.arjjs.ccm.modules.ccm.house.service.CcmHouseDisputeService;
import com.arjjs.ccm.modules.ccm.house.service.CcmHouseDrugsService;
import com.arjjs.ccm.modules.ccm.house.service.CcmHouseEscapeService;
import com.arjjs.ccm.modules.ccm.house.service.CcmSeriousCriminalOffenseService;
import com.arjjs.ccm.modules.ccm.log.entity.CcmLogTail;
import com.arjjs.ccm.modules.ccm.log.service.CcmLogTailService;
import com.arjjs.ccm.modules.ccm.org.entity.CcmOrgArea;
import com.arjjs.ccm.modules.ccm.org.entity.SysArea;
import com.arjjs.ccm.modules.ccm.org.service.CcmOrgAreaService;
import com.arjjs.ccm.modules.ccm.org.service.SysAreaService;
import com.arjjs.ccm.modules.ccm.pop.entity.CcmPeople;
import com.arjjs.ccm.modules.ccm.pop.entity.CcmPopTenant;
import com.arjjs.ccm.modules.ccm.pop.service.CcmPeopleService;
import com.arjjs.ccm.modules.ccm.pop.service.CcmPopTenantService;
import com.arjjs.ccm.modules.ccm.report.entity.CcmPeopleAmount;
import com.arjjs.ccm.modules.ccm.report.entity.CcmPeopleStat;
import com.arjjs.ccm.modules.ccm.report.service.CcmPeopleAmountService;
import com.arjjs.ccm.modules.ccm.report.service.CcmPeopleStatService;
import com.arjjs.ccm.modules.ccm.tenant.entity.CcmTenantRecord;
import com.arjjs.ccm.modules.ccm.tenant.service.CcmTenantRecordService;
import com.arjjs.ccm.modules.sys.entity.Area;
import com.arjjs.ccm.modules.sys.entity.Dict;
import com.arjjs.ccm.modules.sys.service.AreaService;
import com.arjjs.ccm.modules.sys.service.DictService;
import com.arjjs.ccm.tool.CommUtil;
import com.arjjs.ccm.tool.LineCoefficient;
import com.arjjs.ccm.tool.PlmTypes;
import com.arjjs.ccm.tool.SearchTabMore;
import com.google.common.collect.Maps;

import net.sf.json.JSONArray;
import net.sf.json.JsonConfig;
import net.sf.json.util.CycleDetectionStrategy;

/**
 * 实有人口Controller
 * 
 * @author liang
 * @version 2018-01-04
 */
@Controller
@RequestMapping(value = "${adminPath}/pop/ccmPeople")
public class CcmPeopleController extends BaseController {

	@Autowired
	private CcmPeopleService ccmPeopleService;
	@Autowired
	private CcmHouseDrugsService ccmHouseDrugsService;
	@Autowired
	private CcmLogTailService ccmLogTailService;
	@Autowired
	private AreaService areaService;
	@Autowired
	private CcmOrgAreaService ccmOrgAreaService;
	@Autowired
	private CcmHouseBuildmanageService ccmHouseBuildmanageService;
	@Autowired
	private CcmPeopleAmountService ccmPeopleAmountService;
	@Autowired
	private CcmPeopleStatService ccmPeopleStatService;
	@Autowired
	private CcmPopTenantService ccmPopTenantService;
	@Autowired
	private CcmHarmNationalSecurityService ccmHarmNationalSecurityService;
	@Autowired
	private CcmSeriousCriminalOffenseService ccmSeriousCriminalOffenseService;
	@Autowired
	private DictService dictService;
	@Autowired
	private CcmHouseEscapeService ccmHouseEscapeService;
	@Autowired
	private CppPopPopDao cppPopPopDao;
	@Autowired
	private CppPopVehileDao cppPopVehileDao;
	@Autowired
	private CcmHouseDisputeService ccmHouseDisputeService;
	@Autowired
	private CcmTenantRecordService ccmTenantRecordService;
	@Autowired
	private SysAreaService sysAreaService;

	@ModelAttribute
	public CcmPeople get(@RequestParam(required = false) String id) {
		CcmPeople entity = null;
		if (StringUtils.isNotBlank(id)) {
			entity = ccmPeopleService.get(id);
		}
		if (entity == null) {
			entity = new CcmPeople();
		}
		return entity;
	}

	@RequestMapping(value = "relation")
	@ResponseBody
	public Object getRelationData(@RequestParam(value = "id") String id) {

		CcmPeople ccmPeople = ccmPeopleService.get(id);
		Map<String, Object> map = Maps.newHashMap();
		List<CppPopPop> cppPopPoplList = cppPopPopDao.getByIdCard(ccmPeople.getIdent());
		List<CppPopVehile> cppPopVehilelList = cppPopVehileDao.getByRelation(ccmPeople.getIdent());
		map.put("cppPopPop", cppPopPoplList);
		map.put("cppPopVehile", cppPopVehilelList);

		return map;
	}

	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = { "list", "" })
	public String list(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response, Model model) {
		Page<CcmPeople> page = ccmPeopleService.findPage(new Page<CcmPeople>(request, response), ccmPeople);

		List<CcmPeople> list = page.getList();
		//
		CcmPeople ccmPeople2 = new CcmPeople();
		String[] listLimite = new String[list.size()];
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				listLimite[i] = list.get(i).getId();
			}
			ccmPeople2.setListLimite(listLimite);
			List<CcmPeople> list2 = ccmPeopleService.findListLimite(ccmPeople2);// 数组查询id
			page.setList(list2);
		}

		// List<CcmPeople> list2 = new ArrayList<>();
		// if(list.size()>0){
		// for(CcmPeople p:list){
		// p = ccmPeopleService.get(p.getId());
		// list2.add(p);
		// }
		// page.setList(list2);
		// }
		model.addAttribute("page", page);
		return "ccm/pop/ccmPeopleList";
	}

	// 党员
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "listCommunist")
	public String listCommunist(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		Page<CcmPeople> page = ccmPeopleService.findCommunistPage(new Page<CcmPeople>(request, response), ccmPeople);
		// 数组查询id
		List<CcmPeople> list = page.getList();
		CcmPeople ccmPeople2 = new CcmPeople();
		String[] listLimite = new String[list.size()];
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				listLimite[i] = list.get(i).getId();
			}
			ccmPeople2.setListLimite(listLimite);
			List<CcmPeople> list2 = ccmPeopleService.findListLimite(ccmPeople2);// 数组查询id
			page.setList(list2);
		}

		model.addAttribute("page", page);
		return "ccm/pop/ccmPeopleCommunistList";
	}

	// 党员表单
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "formCommunist")
	public String formCommunist(CcmPeople ccmPeople, Model model) {
		// 创建 查询对象 建立查询条件
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmPeople.getId());
		ccmLogTailDto.setRelevanceTable("ccm_people");
		List<CcmLogTail> ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
		// 返回查询结果
		JsonConfig config = new JsonConfig();
		config.setExcludes(new String[] { "createBy", "updateBy", "currentUser", "dbName", "global", "page",
				"createDate", "updateDate", "sqlMap" });
		config.setIgnoreDefaultExcludes(false); // 设置默认忽略
		config.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		String jsonDocumentList = JSONArray.fromObject(ccmLogTailList, config).toString();
		model.addAttribute("documentList", jsonDocumentList);
		model.addAttribute("documentNumber", ccmLogTailList.size());

		model.addAttribute("ccmLogTailList", ccmLogTailList);
		model.addAttribute("ccmPeople", ccmPeople);
		return "ccm/pop/ccmPeopleCommunistForm";
	}

	// 党员删除
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "deleteCommunist")
	public String deleteCommunist(CcmPeople ccmPeople, RedirectAttributes redirectAttributes) {
		ccmPeopleService.delete(ccmPeople);
		addMessage(redirectAttributes, "删除实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/listCommunist/?repage";
	}

	// 党员保存
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "saveCommunist")
	public String saveCommunist(CcmPeople ccmPeople, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmPeople)) {
			return form(ccmPeople, model);
		}
		// 注入楼栋id
		if (ccmPeople.getRoomId() != null && ccmPeople.getRoomId().getId() != null
				&& !"".equals(ccmPeople.getRoomId().getId())) {
			CcmPopTenant ccmPopTenant = ccmPopTenantService.get(ccmPeople.getRoomId().getId());
			if (ccmPopTenant != null && ccmPopTenant.getBuildingId() != null
					&& ccmPopTenant.getBuildingId().getId() != null && ccmPopTenant.getBuildingId().getId() != "") {
				ccmPeople.setBuildId(ccmPopTenant.getBuildingId());
			}
		}
		ccmPeopleService.save(ccmPeople);
		addMessage(redirectAttributes, "保存实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/listCommunist/?repage";
	}

	// 老年人
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "listOlder")
	public String listOlder(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());
		calendar.add(Calendar.YEAR, 0 - PlmTypes.OLD_AGE);
		ccmPeople.setBirthday(calendar.getTime());
		Page<CcmPeople> page = ccmPeopleService.findOlderPage(new Page<CcmPeople>(request, response), ccmPeople);
		// 数组查询id
		List<CcmPeople> list = page.getList();
		CcmPeople ccmPeople2 = new CcmPeople();
		String[] listLimite = new String[list.size()];
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				listLimite[i] = list.get(i).getId();
			}
			ccmPeople2.setListLimite(listLimite);
			List<CcmPeople> list2 = ccmPeopleService.findListLimite(ccmPeople2);// 数组查询id
			page.setList(list2);
		}

		model.addAttribute("page", page);
		return "ccm/pop/ccmPeopleOlderList";
	}

	// 老年人表单
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "formOlder")
	public String formOlder(CcmPeople ccmPeople, Model model) {
		// 创建 查询对象 建立查询条件
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmPeople.getId());
		ccmLogTailDto.setRelevanceTable("ccm_people");
		List<CcmLogTail> ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
		// 返回查询结果
		JsonConfig config = new JsonConfig();
		config.setExcludes(new String[] { "createBy", "updateBy", "currentUser", "dbName", "global", "page",
				"createDate", "updateDate", "sqlMap" });
		config.setIgnoreDefaultExcludes(false); // 设置默认忽略
		config.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		String jsonDocumentList = JSONArray.fromObject(ccmLogTailList, config).toString();
		model.addAttribute("documentList", jsonDocumentList);
		model.addAttribute("documentNumber", ccmLogTailList.size());

		model.addAttribute("ccmLogTailList", ccmLogTailList);
		model.addAttribute("ccmPeople", ccmPeople);
		return "ccm/pop/ccmPeopleOlderForm";
	}

	// 老年人删除
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "deleteOlder")
	public String deleteOlder(CcmPeople ccmPeople, RedirectAttributes redirectAttributes) {
		ccmPeopleService.delete(ccmPeople);
		addMessage(redirectAttributes, "删除实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/listOlder/?repage";
	}

	// 老年人保存
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "saveOlder")
	public String saveOlder(CcmPeople ccmPeople, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmPeople)) {
			return form(ccmPeople, model);
		}
		// 注入楼栋id
		if (ccmPeople.getRoomId() != null && ccmPeople.getRoomId().getId() != null
				&& !"".equals(ccmPeople.getRoomId().getId())) {
			CcmPopTenant ccmPopTenant = ccmPopTenantService.get(ccmPeople.getRoomId().getId());
			if (ccmPopTenant != null && ccmPopTenant.getBuildingId() != null
					&& ccmPopTenant.getBuildingId().getId() != null && ccmPopTenant.getBuildingId().getId() != "") {
				ccmPeople.setBuildId(ccmPopTenant.getBuildingId());
			}
		}
		ccmPeopleService.save(ccmPeople);
		addMessage(redirectAttributes, "保存实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/listOlder/?repage";
	}

	// 特殊关怀First
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "listCareFirst")
	public String listCareFirst(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		Page<CcmPeople> page = ccmPeopleService.findCareFirst(new Page<CcmPeople>(request, response), ccmPeople);
		// 数组查询id
		List<CcmPeople> list = page.getList();
		CcmPeople ccmPeople2 = new CcmPeople();
		String[] listLimite = new String[list.size()];
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				listLimite[i] = list.get(i).getId();
			}
			ccmPeople2.setListLimite(listLimite);
			List<CcmPeople> list2 = ccmPeopleService.findListLimite(ccmPeople2);// 数组查询id
			page.setList(list2);
		}

		model.addAttribute("page", page);
		return "ccm/pop/ccmPeopleCareList";
	}

	// 特殊关怀
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "listCare")
	public String listCare(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response, Model model) {
		String specialCareTypeStr = "";
		if (ccmPeople.getSpecialCareType() != null && !"".equals(ccmPeople.getSpecialCareType())) {
			String[] specialCareTypes = ccmPeople.getSpecialCareType().split(",");
			for (int i = 0; i < specialCareTypes.length; i++) {// 去掉空字符串和null字符串
				if (specialCareTypes[i] != null && !"".equals(specialCareTypes[i])
						&& !"null".equals(specialCareTypes[i])) {
					specialCareTypeStr = specialCareTypeStr + specialCareTypes[i] + ",";
				}
			}
			ccmPeople.setSpecialCareTypes(specialCareTypeStr.split(","));
		}
		if ("".equals(specialCareTypeStr)) {// 传过来值中没有有效的内容，则查询全部
			Dict dict = new Dict();
			dict.setType("pop_special_care_type");
			List<Dict> dictList = dictService.findList(dict);
			String[] specialCareTypes = new String[dictList.size()];
			for (int i = 0; i < specialCareTypes.length; i++) {
				specialCareTypes[i] = dictList.get(i).getValue();
			}
			ccmPeople.setSpecialCareTypes(specialCareTypes);
		}
		Page<CcmPeople> page = ccmPeopleService.findCarePage(new Page<CcmPeople>(request, response), ccmPeople);
		// 数组查询id
		List<CcmPeople> list = page.getList();
		CcmPeople ccmPeople2 = new CcmPeople();
		String[] listLimite = new String[list.size()];
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				listLimite[i] = list.get(i).getId();
			}
			ccmPeople2.setListLimite(listLimite);
			List<CcmPeople> list2 = ccmPeopleService.findListLimite(ccmPeople2);// 数组查询id
			page.setList(list2);
		}

		model.addAttribute("page", page);
		return "ccm/pop/ccmPeopleCareList";
	}

	// 特殊关怀表单
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "formCare")
	public String formCare(CcmPeople ccmPeople, Model model) {
		// 创建 查询对象 建立查询条件
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmPeople.getId());
		ccmLogTailDto.setRelevanceTable("ccm_people");
		List<CcmLogTail> ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
		// 返回查询结果
		JsonConfig config = new JsonConfig();
		config.setExcludes(new String[] { "createBy", "updateBy", "currentUser", "dbName", "global", "page",
				"createDate", "updateDate", "sqlMap" });
		config.setIgnoreDefaultExcludes(false); // 设置默认忽略
		config.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		String jsonDocumentList = JSONArray.fromObject(ccmLogTailList, config).toString();
		model.addAttribute("documentList", jsonDocumentList);
		model.addAttribute("documentNumber", ccmLogTailList.size());

		model.addAttribute("ccmLogTailList", ccmLogTailList);
		model.addAttribute("ccmPeople", ccmPeople);
		return "ccm/pop/ccmPeopleCareForm";
	}

	// 特殊关怀删除
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "deleteCare")
	public String deleteCare(CcmPeople ccmPeople, RedirectAttributes redirectAttributes) {
		ccmPeopleService.delete(ccmPeople);
		addMessage(redirectAttributes, "删除实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/listCareFirst/?repage";
	}

	// 特殊关怀保存
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "saveCare")
	public String saveCare(CcmPeople ccmPeople, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmPeople)) {
			return form(ccmPeople, model);
		}
		// 注入楼栋id
		if (ccmPeople.getRoomId() != null && ccmPeople.getRoomId().getId() != null
				&& !"".equals(ccmPeople.getRoomId().getId())) {
			CcmPopTenant ccmPopTenant = ccmPopTenantService.get(ccmPeople.getRoomId().getId());
			if (ccmPopTenant != null && ccmPopTenant.getBuildingId() != null
					&& ccmPopTenant.getBuildingId().getId() != null && ccmPopTenant.getBuildingId().getId() != "") {
				ccmPeople.setBuildId(ccmPopTenant.getBuildingId());
			}
		}
		ccmPeopleService.save(ccmPeople);
		addMessage(redirectAttributes, "保存实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/listCareFirst/?repage";
	}

	// 人员信息弹框
	@ResponseBody
	@RequestMapping(value = "getHousePopForm")
	public CcmPeople getHousePopForm(CcmPeople ccmPeople, Model model) {
		// 返回对象结果
		ccmPeople = ccmPeopleService.getHousePopForm(ccmPeople);
		String nation = ccmPeopleService.getNation(ccmPeople);
		if (nation == null || nation == "") {
			ccmPeople.setNation("");
		} else {
			ccmPeople.setNation(nation);
		}
		return ccmPeople;
	}

	// 户籍户号调用
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "listAccount")
	public String listAccount(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		Page<CcmPeople> page = ccmPeopleService.listAccount(new Page<CcmPeople>(request, response), ccmPeople);
		model.addAttribute("page", page);
		model.addAttribute("ccmPeopleAccount", ccmPeople);
		return "ccm/pop/ccmPeopleListAccount";
	}

	// 保存户籍家庭人员户籍列表
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "saveAccount")
	public String saveAccount(CcmPeople ccmPeople, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmPeople)) {
			return form(ccmPeople, model);
		}
		// 注入楼栋id
		if (ccmPeople.getRoomId() != null && ccmPeople.getRoomId().getId() != null
				&& !"".equals(ccmPeople.getRoomId().getId())) {
			CcmPopTenant ccmPopTenant = ccmPopTenantService.get(ccmPeople.getRoomId().getId());
			if (ccmPopTenant != null && ccmPopTenant.getBuildingId() != null
					&& ccmPopTenant.getBuildingId().getId() != null && ccmPopTenant.getBuildingId().getId() != "") {
				ccmPeople.setBuildId(ccmPopTenant.getBuildingId());
			}
		}
		ccmPeopleService.save(ccmPeople);
		addMessage(redirectAttributes, "保存实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/listAccount?account=" + ccmPeople.getAccount()
				+ "&repage";
	}

	// 删除户籍家庭人员
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "deleteAccount")
	public String deleteAccount(CcmPeople ccmPeople, RedirectAttributes redirectAttributes) {
		ccmPeopleService.delete(ccmPeople);
		addMessage(redirectAttributes, "删除户籍家庭人员成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/listAccount?account=" + ccmPeople.getAccount()
				+ "&repage";
	}

	// 户籍户号调用（从户籍跟踪信息跳回户籍列表）
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "listAccountFind")
	public String listAccountFind(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		ccmPeople = ccmPeopleService.get(ccmPeople);
		Page<CcmPeople> page = ccmPeopleService.listAccount(new Page<CcmPeople>(request, response), ccmPeople);
		model.addAttribute("page", page);
		model.addAttribute("ccmPeopleAccount", ccmPeople);
		return "ccm/pop/ccmPeopleListAccount";
	}

	// 校园周边重点人员显示
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "formPop")
	public String formPop(CcmPeople ccmPeople, Model model) {
		// 创建 查询对象 建立查询条件
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmPeople.getId());
		ccmLogTailDto.setRelevanceTable("ccm_house_schoolrim");
		List<CcmLogTail> ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
		// 返回查询结果
		JsonConfig config = new JsonConfig();
		config.setExcludes(new String[] { "createBy", "updateBy", "currentUser", "dbName", "global", "page",
				"createDate", "updateDate", "sqlMap" });
		config.setIgnoreDefaultExcludes(false); // 设置默认忽略
		config.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		String jsonDocumentList = JSONArray.fromObject(ccmLogTailList, config).toString();
		model.addAttribute("documentList", jsonDocumentList);
		model.addAttribute("documentNumber", ccmLogTailList.size());

		model.addAttribute("ccmLogTailList", ccmLogTailList);
		model.addAttribute("ccmPeople", ccmPeople);
		return "ccm/pop/ccmPeopleFormPop";
	}

	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "form")
	public String form(CcmPeople ccmPeople, Model model) {
		// 创建 查询对象 建立查询条件
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmPeople.getId());
		ccmLogTailDto.setRelevanceTable("ccm_people");
		List<CcmLogTail> ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
		// 返回查询结果
		JsonConfig config = new JsonConfig();
		config.setExcludes(new String[] { "createBy", "updateBy", "currentUser", "dbName", "global", "page",
				"createDate", "updateDate", "sqlMap" });
		config.setIgnoreDefaultExcludes(false); // 设置默认忽略
		config.setCycleDetectionStrategy(CycleDetectionStrategy.LENIENT);
		String jsonDocumentList = JSONArray.fromObject(ccmLogTailList, config).toString();
		model.addAttribute("documentList", jsonDocumentList);
		model.addAttribute("documentNumber", ccmLogTailList.size());

		model.addAttribute("ccmLogTailList", ccmLogTailList);
		model.addAttribute("ccmPeople", ccmPeople);
		return "ccm/pop/ccmPeopleForm";
	}

	// 户籍人口添加
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "formAccount")
	public String formAccount(CcmPeople ccmPeople, Model model) {
		// 创建 查询对象 建立查询条件
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmPeople.getId());
		ccmLogTailDto.setRelevanceTable("ccm_people");
		List<CcmLogTail> ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);
		// 返回查询结果
		model.addAttribute("ccmLogTailList", ccmLogTailList);
		model.addAttribute("ccmPeople", ccmPeople);
		return "ccm/pop/ccmPeopleFormAccount";
	}

	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "save")
	public String save(CcmPeople ccmPeople, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmPeople)) {
			return form(ccmPeople, model);
		}
		// 注入楼栋id
		if (ccmPeople.getRoomId() != null && ccmPeople.getRoomId().getId() != null
				&& !"".equals(ccmPeople.getRoomId().getId())) {
			CcmPopTenant ccmPopTenant = ccmPopTenantService.get(ccmPeople.getRoomId().getId());
			if (ccmPopTenant != null && ccmPopTenant.getBuildingId() != null
					&& ccmPopTenant.getBuildingId().getId() != null && ccmPopTenant.getBuildingId().getId() != "") {
				ccmPeople.setBuildId(ccmPopTenant.getBuildingId());
			}
		}
		ccmPeopleService.save(ccmPeople);
		addMessage(redirectAttributes, "保存实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/?repage";
	}

	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "delete")
	public String delete(CcmPeople ccmPeople, RedirectAttributes redirectAttributes) {
		ccmPeopleService.delete(ccmPeople);
		addMessage(redirectAttributes, "删除实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/?repage";
	}

	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "specialform")
	public String specialform(CcmPeople ccmPeople, Model model) {
		model.addAttribute("ccmPeople", ccmPeople);
		CcmHouseDrugs Drugs = ccmHouseDrugsService.getPeopleALL(ccmPeople.getId());
		if (Drugs == null) {
			Drugs = new CcmHouseDrugs();
		}
		model.addAttribute("ccmHouseDrugs", Drugs);
		return "/ccm/house/pop/ccmHousePoPDrugsForm";
	}

	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "seriousCriminalOffenseform")
	public String seriousCriminalOffenseform(CcmPeople ccmPeople, Model model) {
		model.addAttribute("ccmPeople", ccmPeople);
		CcmSeriousCriminalOffense SeriousCriminalOffense = ccmSeriousCriminalOffenseService
				.getPeopleALL(ccmPeople.getId());
		if (SeriousCriminalOffense == null) {
			SeriousCriminalOffense = new CcmSeriousCriminalOffense();
		}
		model.addAttribute("ccmSeriousCriminalOffense", SeriousCriminalOffense);
		return "/ccm/house/pop/ccmHousePoPSeriousCriminalOffenseForm";
	}

	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "specialHarmNationalform")
	public String specialHarmNationalform(CcmPeople ccmPeople, Model model) {
		model.addAttribute("ccmPeople", ccmPeople);
		CcmHarmNationalSecurity HarmNationalSecurity = ccmHarmNationalSecurityService.getPeopleALL(ccmPeople.getId());
		if (HarmNationalSecurity == null) {
			HarmNationalSecurity = new CcmHarmNationalSecurity();
		}
		model.addAttribute("ccmHarmNationalSecurity", HarmNationalSecurity);
		return "/ccm/house/pop/ccmHousePoPHarmNationalForm";
	}

	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "escapePeopleform")
	public String escapePeopleform(CcmPeople ccmPeople, Model model) {
		model.addAttribute("ccmPeople", ccmPeople);
		CcmHouseEscape HouseEscape = ccmHouseEscapeService.getPeopleALL(ccmPeople.getId());
		if (HouseEscape == null) {
			HouseEscape = new CcmHouseEscape();
		}
		model.addAttribute("ccmHouseEscape", HouseEscape);
		return "/ccm/house/pop/ccmHousePoPEscapeForm";
	}

	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "specialHouseDisputeform")
	public String specialHouseDisputeform(CcmPeople ccmPeople, Model model) {
		model.addAttribute("ccmPeople", ccmPeople);
		CcmHouseDispute HouseDispute = ccmHouseDisputeService.getPeopleALL(ccmPeople.getId());
		if (HouseDispute == null) {
			HouseDispute = new CcmHouseDispute();
		}
		model.addAttribute("ccmHouseDispute", HouseDispute);
		return "/ccm/house/pop/ccmHousePoPDisputeForm";
	}

	/**
	 * 导出实有人口数据
	 * 
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "export", method = RequestMethod.POST)
	public String exportFile(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response,
			RedirectAttributes redirectAttributes) {
		try {
			String fileName = "实有人口数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			List<CcmPeople> list = ccmPeopleService.findList(ccmPeople);
			List<CcmPeople> list2 = new ArrayList<CcmPeople>();
			// 根据ID查询数据详细信息
			CcmPeople ccmPeople2 = new CcmPeople();
			String[] listLimite = new String[list.size()];
			if (list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					listLimite[i] = list.get(i).getId();
				}
				ccmPeople2.setListLimite(listLimite);
				list2 = ccmPeopleService.findListLimite(ccmPeople2);// 数组查询id
			}

			new ExportExcel("实有人口数据", CcmPeople.class).setDataList(list2).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出实有人口失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/pop/ccmPeople/?repage";
	}

	/**
	 * 导入实有人口数据
	 * 
	 * @param file
	 * @param redirectAttributes
	 * 修改：彭建强 20190522 导入数据时，能够自动添加楼栋和房屋，各类关联数据放入到内存中，减少频繁操作数据库带来的压力
	 * @return
	 */
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "import", method = RequestMethod.POST)
	public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + adminPath + "/pop/ccmPeople/?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<CcmPeople> list = ei.getDataList(CcmPeople.class);
			//系统中所有网格数据
			SysArea sysArea = new SysArea();
			sysArea.setType("7");
			List<SysArea> listGrid = sysAreaService.findList(sysArea);
			//系统中所有楼栋数据
			CcmHouseBuildmanage ccmHouseBuildmanage = new CcmHouseBuildmanage();
			List<CcmHouseBuildmanage> listBuild = ccmHouseBuildmanageService.findList(ccmHouseBuildmanage);
			//系统中所有房屋数据
			CcmPopTenant room = new CcmPopTenant();
			List<CcmPopTenant> listRoom = ccmPopTenantService.findList(room);
			//声明3个临时变量，用于优化网格、楼栋、房屋处理前的判断
			SysArea tmpGrid = new SysArea();
			CcmHouseBuildmanage tmpBuild = new CcmHouseBuildmanage();
			CcmPopTenant tmpRoom = new CcmPopTenant();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
			
			for (CcmPeople People : list) {
				// 如果当前用户的身份未填写或者为空或者身份证号码位数不够18位则应该进行 剔除
				if (StringUtils.isBlank(People.getIdent()) || People.getIdent().length() != 18) {
					failureMsg.append("<br/>实有人口名" + People.getName() + " 导入失败：" + "当前的用户的身份证材料尚未存在。");
					continue;
				}
				// 进行身份证验证 ,如果已经存在则进行 失败条目的添加。 并跳过当前的内容
				if (ccmPeopleService.checkPeopleIden(People)) {
					failureMsg.append("<br/>实有人口名" + People.getName() + " 导入失败：" + "当前的用户的身份证材料已经存在于当前的数据库中。");
					continue;
				}

				try {
					BeanValidators.validateWithException(validator, People);
					/***网格数据赋值*直接从Excel获取到**/
					if (tmpGrid.getName() != null && tmpGrid.getName().equals(People.getAreaGridId().getName())) {
//						Area areaComId = new Area();
//						Area areaGridId = new Area();
//						areaComId.setId(tmpGrid.getParent().getId());
//						areaGridId.setId(tmpGrid.getId());
//						People.setAreaComId(areaComId);
//						People.setAreaGridId(areaGridId);
					} else {
						for (SysArea grid : listGrid) {
							if (grid.getName().equals(People.getAreaGridId().getName())) {
								tmpGrid = grid;//赋值临时变量
//								Area areaComId = new Area();
//								Area areaGridId = new Area();
//								areaComId.setId(tmpGrid.getParent().getId());
//								areaGridId.setId(tmpGrid.getId());
//								People.setAreaComId(areaComId);
//								People.setAreaGridId(areaGridId);
								break;
							}
						}
					}

					/***楼栋数据赋值***/
					if (tmpBuild.getName() != null && tmpBuild.getName().equals(People.getBuildName())
							&& tmpBuild.getArea().getName().equals(People.getAreaGridId().getName())) {//楼栋名称相等 且 网格名称相等
						CcmHouseBuildmanage build = new CcmHouseBuildmanage();
						build.setId(tmpBuild.getId());
						People.setBuildId(build);
					} else {
						boolean isBuildExist = false;
						for (CcmHouseBuildmanage buildmanage : listBuild) {
							if (buildmanage.getBuildname().equals(People.getBuildName())
									&& buildmanage.getArea().getName().equals(People.getAreaGridId().getName())) {//楼栋名称相等 且 网格名称相等
								tmpBuild = buildmanage;//赋值临时变量
								CcmHouseBuildmanage build = new CcmHouseBuildmanage();
								build.setId(tmpBuild.getId());
								People.setBuildId(build);
								isBuildExist = true;
								break;
							}
						}
						if (!isBuildExist) {//楼栋不存在，增加楼栋
							CcmHouseBuildmanage build = new CcmHouseBuildmanage();
							build.setId(UUID.randomUUID().toString());
							build.setBuildname(People.getBuildName());
							if (People.getAreaGridId() != null) {
//								Area area = new Area();
//								area.setId(People.getAreaGridId().getId());
								build.setArea(People.getAreaGridId());
							}
							build.setAreaPoint(People.getAreaPoint());
							build.setResidencedetail(People.getAreaComId().getName() + People.getAreaGridId().getName() + People.getBuildName());
							build.setIsNewRecord(true);
							ccmHouseBuildmanageService.save(build);
							listBuild.add(build);
							tmpBuild = build;//赋值临时变量
							People.setBuildId(build);
						}
					}

					/***房屋数据赋值***/
					if (tmpRoom.getHouseBuild() != null && tmpRoom.getHouseBuild().equals(People.getRoomName())
							&& tmpRoom.getBuildingId().getBuildname().equals(People.getBuildName())) {//房屋编号相等 且 楼栋名称相等
						CcmPopTenant room2 = new CcmPopTenant();
						room2.setId(tmpRoom.getId());
						People.setRoomId(room2);
					} else {
						boolean isRoomExist = false;
						for (CcmPopTenant roomEntity : listRoom) {
							if (roomEntity.getHouseBuild().equals(People.getRoomName())
									&& roomEntity.getBuildingId().getBuildname().equals(People.getBuildName())) {
								tmpRoom = roomEntity;//赋值临时变量
								CcmPopTenant room2 = new CcmPopTenant();
								room2.setId(tmpRoom.getId());
								People.setRoomId(room2);
								isRoomExist = true;
								break;
							}
						}
						if (!isRoomExist) {//楼栋不存在，增加楼栋
							CcmPopTenant room2 = new CcmPopTenant();
							room2.setId(UUID.randomUUID().toString());
							room2.setHouseBuild(People.getRoomName());
							if (People.getAreaGridId() != null) {
//								Area area = new Area();
//								area.setId(People.getAreaGridId().getId());
								room2.setArea(People.getAreaGridId());
							}
							room2.setHousePlace(tmpBuild.getResidencedetail());
							room2.setBuildingId(tmpBuild);
							room2.setIsNewRecord(true);
							ccmPopTenantService.save(room2);
							listRoom.add(room2);
							tmpRoom = room2;//赋值临时变量
							People.setRoomId(room2);
						}
					}
					
//					CcmPopTenant ccmPopTenant = new CcmPopTenant();// 构造房屋ID
//					ccmPopTenant.setId(People.getRoomIdString());
//					People.setRoomId(ccmPopTenant);
					
					//性别
					if (!CommUtil.isNumeric(People.getSex())) {//Excel中读取过来的和数据字典中的不匹配的
						if (People.getSex() != null && People.getSex().contains("男")) {
							People.setSex("0");
						} else if (People.getSex() != null && People.getSex().contains("女")) {
							People.setSex("1");
						} else {//未指定性别时，从身份证中去获取性别
							String sex = Integer.parseInt(People.getIdent().substring(
									People.getIdent().length() - 4, People.getIdent().length() - 1)
									) % 2 == 0 ? "1" : "0";
							People.setSex(sex);
						}
					}
					
					//民族
					if (!CommUtil.isNumeric(People.getNation())) {//Excel中读取过来的和数据字典中的不匹配的
						if (People.getNation() != null) {
							People.setNation(CommUtil.getNationValue(People.getNation()));
						}
					}

					//婚姻
					if (!CommUtil.isNumeric(People.getMarriage())) {//Excel中读取过来的和数据字典中的不匹配的
						if (People.getMarriage() != null && People.getMarriage().contains("未")) {
							People.setMarriage("10");
						} else if (People.getMarriage() != null && People.getMarriage().contains("已")) {
							People.setMarriage("20");
						} else if (People.getMarriage() != null && People.getMarriage().contains("丧")) {
							People.setMarriage("30");
						} else if (People.getMarriage() != null && People.getMarriage().contains("离")) {
							People.setMarriage("40");
						} else {//未说明的婚姻状况
							People.setMarriage("90");
						}
					}
					

					//学历
					if (!CommUtil.isNumeric(People.getEducation())) {//Excel中读取过来的和数据字典中的不匹配的
						if (People.getEducation() != null && People.getEducation().contains("文盲")) {
							People.setEducation("90");//其他
						} else if (People.getEducation() != null && People.getEducation().contains("小学")) {
							People.setEducation("50");//高中以下
						} else if (People.getEducation() != null && People.getEducation().contains("初中")) {
							People.setEducation("50");//高中以下
						} else if (People.getEducation() != null && People.getEducation().contains("高中")) {
							People.setEducation("60");
						} else if (People.getEducation() != null && People.getEducation().contains("中专")) {
							People.setEducation("40");
						} else if (People.getEducation() != null && People.getEducation().contains("大专")) {
							People.setEducation("40");
						} else if (People.getEducation() != null && (People.getEducation().contains("大学") || People.getEducation().contains("本科"))) {
							People.setEducation("40");
						} else if (People.getEducation() != null && People.getEducation().contains("研究")) {
							People.setEducation("14");
						} else if (People.getEducation() != null && People.getEducation().contains("博士")) {
							People.setEducation("11");
						} else {
							People.setEducation("90");
						}
					}
					
					//宗教信仰
					if (!CommUtil.isNumeric(People.getBelief())) {//Excel中读取过来的和数据字典中的不匹配的
						if (People.getBelief() != null) {
							People.setBelief(CommUtil.getBeliefValue(People.getBelief()));
						}
					}
					

					//人口类型O
					if (!CommUtil.isNumeric(People.getType())) {//Excel中读取过来的和数据字典中的不匹配的
						if (People.getType() != null && (People.getType().contains("流动") || People.getType().contains("非本地") || People.getType().contains("外来"))) {
							People.setType("20");//流动
						} else if (People.getType() != null && (People.getType().contains("境外") || People.getType().contains("外国"))) {
							People.setType("30");//境外
						} else if (People.getType() != null && (People.getType().contains("本地") || People.getType().contains("户籍"))) {
							People.setType("10");//户籍
						}  else if (People.getType() != null && People.getType().contains("未")) {
							People.setType("40");//未落户
						} else {//流动
							People.setType("20");
						}
					}
					
					//政治面貌
					if (!CommUtil.isNumeric(People.getPolitics())) {//Excel中读取过来的和数据字典中的不匹配的
						if (People.getPolitics() != null && People.getPolitics().contains("党")) {
							People.setPolitics("01");
						} else if (People.getPolitics() != null && People.getPolitics().contains("团")) {
							People.setPolitics("03");
						} else if (People.getPolitics() != null && People.getPolitics().contains("群")) {
							People.setPolitics("09");
						}
					}
					
					//出生日期，从身份证中去获取
					String birthStr = People.getIdent().substring(6, 14);
					People.setBirthday(sdf.parse(birthStr));
					
					ccmPeopleService.save(People);
					successNum++;
				} catch (ConstraintViolationException ex) {
					failureMsg.append("<br/>实有人口名 " + People.getName() + " 导入失败：");
					List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(ex, ": ");
					for (String message : messageList) {
						failureMsg.append(message + "; ");
						failureNum++;
					}
				} catch (Exception ex) {
					failureMsg.append("<br/>实有人口名 " + People.getName() + " 导入失败：" + ex.getMessage());
				}
			}
			if (failureNum > 0) {
				failureMsg.insert(0, "，失败 " + failureNum + " 条实有人口，导入信息如下：");
			}
			addMessage(redirectAttributes, "已成功导入 " + successNum + " 条实有人口" + failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入实有人口失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/pop/ccmPeople/?repage";
	}
	/*
	public String importFile(MultipartFile file, RedirectAttributes redirectAttributes) {
		if (Global.isDemoMode()) {
			addMessage(redirectAttributes, "演示模式，不允许操作！");
			return "redirect:" + adminPath + "/pop/ccmPeople/?repage";
		}
		try {
			int successNum = 0;
			int failureNum = 0;
			StringBuilder failureMsg = new StringBuilder();
			ImportExcel ei = new ImportExcel(file, 1, 0);
			List<CcmPeople> list = ei.getDataList(CcmPeople.class);
			for (CcmPeople People : list) {
				// 如果当前用户的身份未填写或者为空则应该进行 剔除
				if (StringUtils.isBlank(People.getIdent()) || StringUtils.isBlank(People.getIdenNum())) {
					failureMsg.append("<br/>实有人口名" + People.getName() + " 导入失败：" + "当前的用户的身份证材料尚未存在。");
					continue;
				}
				// 进行身份证验证 ,如果已经存在则进行 失败条目的添加。 并跳过当前的内容
				if (ccmPeopleService.checkPeopleIden(People)) {
					failureMsg.append("<br/>实有人口名" + People.getName() + " 导入失败：" + "当前的用户的身份证材料已经存在于当前的数据库中。");
					continue;
				}

				try {
					BeanValidators.validateWithException(validator, People);
					CcmPopTenant ccmPopTenant = new CcmPopTenant();// 构造房屋ID
					ccmPopTenant.setId(People.getRoomIdString());
					People.setRoomId(ccmPopTenant);
					ccmPeopleService.save(People);
					successNum++;
				} catch (ConstraintViolationException ex) {
					failureMsg.append("<br/>实有人口名 " + People.getName() + " 导入失败：");
					List<String> messageList = BeanValidators.extractPropertyAndMessageAsList(ex, ": ");
					for (String message : messageList) {
						failureMsg.append(message + "; ");
						failureNum++;
					}
				} catch (Exception ex) {
					failureMsg.append("<br/>实有人口名 " + People.getName() + " 导入失败：" + ex.getMessage());
				}
			}
			if (failureNum > 0) {
				failureMsg.insert(0, "，失败 " + failureNum + " 条实有人口，导入信息如下：");
			}
			addMessage(redirectAttributes, "已成功导入 " + successNum + " 条实有人口" + failureMsg);
		} catch (Exception e) {
			addMessage(redirectAttributes, "导入实有人口失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/pop/ccmPeople/?repage";
	}*/

	/**
	 * 导出实有人口数据---特殊关怀人员
	 * 
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "exportSpecialCare", method = RequestMethod.POST)
	public String exportSpecialCareFile(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response,
			RedirectAttributes redirectAttributes) {
		try {
			String fileName = "实有人口特殊关怀人员数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";

			String specialCareTypeStr = "";
			if (ccmPeople.getSpecialCareType() != null && !"".equals(ccmPeople.getSpecialCareType())) {
				String[] specialCareTypes = ccmPeople.getSpecialCareType().split(",");
				for (int i = 0; i < specialCareTypes.length; i++) {// 去掉空字符串和null字符串
					if (specialCareTypes[i] != null && !"".equals(specialCareTypes[i])
							&& !"null".equals(specialCareTypes[i])) {
						specialCareTypeStr = specialCareTypeStr + specialCareTypes[i] + ",";
					}
				}
				ccmPeople.setSpecialCareTypes(specialCareTypeStr.split(","));
			}
			if ("".equals(specialCareTypeStr)) {// 传过来值中没有有效的内容，则查询全部
				Dict dict = new Dict();
				dict.setType("pop_special_care_type");
				List<Dict> dictList = dictService.findList(dict);
				String[] specialCareTypes = new String[dictList.size()];
				for (int i = 0; i < specialCareTypes.length; i++) {
					specialCareTypes[i] = dictList.get(i).getValue();
				}
				ccmPeople.setSpecialCareTypes(specialCareTypes);
			}

			List<CcmPeople> list = ccmPeopleService.findList(ccmPeople);
			new ExportExcel("实有人口特殊关怀人员数据", CcmPeople.class).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出实有人口失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/pop/ccmPeople/?repage";
	}

	/**
	 * 导出实有人口数据---老年人
	 * 
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "exportOlder", method = RequestMethod.POST)
	public String exportOlderFile(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response,
			RedirectAttributes redirectAttributes) {
		try {
			String fileName = "实有人口老年人数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			List<CcmPeople> list = ccmPeopleService.findOlder(ccmPeople);
			new ExportExcel("实有人口老年人数据", CcmPeople.class).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出实有人口失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/pop/ccmPeople/?repage";
	}

	/**
	 * 导出实有人口数据---党员
	 * 
	 * @param user
	 * @param request
	 * @param response
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("pop:ccmPeople:view")
	@RequestMapping(value = "exportCommunist", method = RequestMethod.POST)
	public String exportCommunistFile(CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response,
			RedirectAttributes redirectAttributes) {
		try {
			String fileName = "实有人口党员数据" + DateUtils.getDate("yyyyMMddHHmmss") + ".xlsx";
			List<CcmPeople> list = ccmPeopleService.findCommunist(ccmPeople);
			new ExportExcel("实有人口党员数据", CcmPeople.class).setDataList(list).write(response, fileName).dispose();
			return null;
		} catch (Exception e) {
			addMessage(redirectAttributes, "导出实有人口失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + adminPath + "/pop/ccmPeople/?repage";
	}

	// 人员信息弹框
	@RequestMapping(value = "getMapPopForm")
	public String getMapPopForm(CcmPeople ccmPeople, Model model) {
		// 返回对象结果
		ccmPeople = ccmPeopleService.getHousePopForm(ccmPeople);
		model.addAttribute("ccmPeople", ccmPeople);
		List<CcmPeople> listAccount = new ArrayList<CcmPeople>();
		if (!StringUtils.isBlank(ccmPeople.getAccount())) {
			listAccount = ccmPeopleService.listAccount(ccmPeople);
		}
		// 户籍家庭列表
		model.addAttribute("listAccount", listAccount);
		return "/modules/mapping/houseBuild/mapPop";
	}

	// 首页社区弹出
	@RequestMapping(value = "getMapAreaForm")
	public String getMapAreaForm(CcmPeople ccmPeople, Model model) {
		// 返回对象结果
		if (ccmPeople.getId() != null) {
			CcmOrgArea ccmOrgArea = new CcmOrgArea();
			ccmOrgArea.setId(ccmPeople.getId());
			ccmOrgArea = ccmOrgAreaService.get(ccmOrgArea);// 区域外表
			Area area = new Area();
			area.setId(ccmOrgArea.getArea().getId());
			area = areaService.get(area);// 区域
			//
			// Area area2 = new Area();
			// area2.setParentIds(area.getId());
			// List<Area> areaNetAll = new ArrayList<>();
			// areaNetAll = ccmOrgAreaService.findAreaNet(area2);//
			// 子集-社区and网格（通过父键查子集）area借用ccmOrgArea
			// List<Area> areaNet = new ArrayList<>();//网格
			// if(areaNetAll.size()>0){
			// for(Area a:areaNetAll){
			// if("7".equals(a.getType())){
			// areaNet.add(a);//网格
			// }
			// }
			// }
			//
			// List<CcmOrgArea> ccmOrgAreaNet = new ArrayList<>();
			// CcmOrgArea ccmOrgArea2 = new CcmOrgArea();
			// List<CcmHouseBuildmanage> listBuildmanage = new ArrayList<>();
			// List<CcmHouseBuildmanage> listBuildmanage2 = new ArrayList<>();
			// CcmHouseBuildmanage ccmHouseBuildmanage2 = new CcmHouseBuildmanage();
			// double BuildmanageArea = 0;
			// for (Area net : areaNet) {
			// ccmOrgArea2.setArea(net);
			// ccmOrgArea2 = ccmOrgAreaService.findCcmOrgArea(ccmOrgArea2);
			// if(ccmOrgArea2==null){
			// CcmOrgArea ccmOrgArea3 = new CcmOrgArea();
			// ccmOrgArea2 = ccmOrgArea3;
			// }
			// ccmOrgAreaNet.add(ccmOrgArea2);// 社区网格外表（通过社区网格id查外表）
			//
			// ccmHouseBuildmanage2.setArea(net);
			// listBuildmanage2 = ccmHouseBuildmanageService.findList(ccmHouseBuildmanage2);
			// for (CcmHouseBuildmanage buildmanage : listBuildmanage2) {
			// listBuildmanage.add(buildmanage);// 社区网格楼栋（通过网格area查楼栋）
			// if(buildmanage.getFloorArea()==null||"".equals(buildmanage.getFloorArea())){
			// buildmanage.setFloorArea(0.0);
			// }
			// BuildmanageArea += buildmanage.getFloorArea();// 楼栋总面积
			// }
			// }
			CcmPeopleAmount ccmPeopleAmount = new CcmPeopleAmount();
			ccmPeopleAmount.setArea(area);
			ccmPeopleAmount = ccmPeopleAmountService.findMonthAreaAmount(ccmPeopleAmount);// 首页社区弹框：人口结构
			CcmPeopleStat ccmPeopleStat = new CcmPeopleStat();// 首页社区弹框：本月新增数据
			ccmPeopleStat.setArea(area);// 首页社区弹框：本月新增数据
			ccmPeopleStat = ccmPeopleStatService.findMonthAreaStat(ccmPeopleStat);// 首页社区弹框：本月新增数据
			// List<CcmPopTenant> listCcmPopTenant = new ArrayList<>();// 首页社区弹框:出租屋数据
			// List<CcmPopTenant> listCcmPopTenant2 = new ArrayList<>();
			// CcmPopTenant ccmPopTenant = new CcmPopTenant();
			// for (CcmHouseBuildmanage build : listBuildmanage) {
			// ccmPopTenant.setBuildingId(build);
			// listCcmPopTenant2 = ccmPopTenantService.findHouseRentArea(ccmPopTenant);
			// for (CcmPopTenant build2 : listCcmPopTenant2) {
			// listCcmPopTenant.add(build2);// 首页社区弹框:出租屋数据
			// }
			// }
			// 首页社区弹框:预测下个月人口总数
			List<SearchTabMore> listLineCoefficient = ccmPeopleAmountService.findPopTrendByArea(ccmPeopleAmount);
			double[] y = new double[listLineCoefficient.size()];
			// double[] y = {23 , 44 , 32 , 56 , 33 , 34 , 55 , 65 , 45 , 55 ,
			// 11 , 12 } ;
			for (int i = 0; i < listLineCoefficient.size(); i++) {
				y[i] = 0;
				if (listLineCoefficient.get(i).getValue6() != null) {
					y[i] += (Double.valueOf(listLineCoefficient.get(i).getValue6()));
				}
				if (listLineCoefficient.get(i).getValue7() != null) {
					y[i] += (Double.valueOf(listLineCoefficient.get(i).getValue7()));
				}
				if (listLineCoefficient.get(i).getValue8() != null) {
					y[i] += (Double.valueOf(listLineCoefficient.get(i).getValue8()));
				}
				if (listLineCoefficient.get(i).getValue() != null) {
					y[i] += (Double.valueOf(listLineCoefficient.get(i).getValue()));
				}

			}
			double forecast1 = LineCoefficient.lineCoefficientNum(y);
			int forecast = (int) forecast1;// 首页社区弹框:预测下个月人口总数
			int subForecast = 0;
			if (y.length > 0) {
				subForecast = forecast - (int) y[y.length - 1];// 首页社区弹框:预测下个月人口变化
			}

			int popAll = 0;
			double sexScale = 0;
			int emphasisPopAll = 0;
			if (ccmPeopleAmount != null) {
				// 非空
				CcmPeopleAmount ccmPeopleAmount2 = new CcmPeopleAmount();
				ccmPeopleAmount2.setId(ccmPeopleAmount.getId() == null ? "100000" : ccmPeopleAmount.getId());
				ccmPeopleAmount2.setArea(area); // 区域id
				ccmPeopleAmount2.setPersonAmount(
						ccmPeopleAmount.getPersonAmount() == null ? 0 : ccmPeopleAmount.getPersonAmount()); // 户籍总数量
				ccmPeopleAmount2.setOverseaAmount(
						ccmPeopleAmount.getOverseaAmount() == null ? 0 : ccmPeopleAmount.getOverseaAmount()); // 外籍总数量
				ccmPeopleAmount2.setFloatAmount(
						ccmPeopleAmount.getFloatAmount() == null ? 0 : ccmPeopleAmount.getFloatAmount()); // 流动总数量
				ccmPeopleAmount2.setUnsettleAmount(
						ccmPeopleAmount.getUnsettleAmount() == null ? 0 : ccmPeopleAmount.getUnsettleAmount()); // 未落户总数量
				ccmPeopleAmount2.setPermanentAmount(
						ccmPeopleAmount.getPermanentAmount() == null ? 0 : ccmPeopleAmount.getPermanentAmount()); // 常住总数量
				ccmPeopleAmount2
						.setAidsAmount(ccmPeopleAmount.getAidsAmount() == null ? 0 : ccmPeopleAmount.getAidsAmount()); // 艾滋病患者总数量
				ccmPeopleAmount2.setPsychogenyAmount(
						ccmPeopleAmount.getPsychogenyAmount() == null ? 0 : ccmPeopleAmount.getPsychogenyAmount()); // 肇事肇祸等严重精神障碍患者总数量
				ccmPeopleAmount2.setRectificationAmount(ccmPeopleAmount.getRectificationAmount() == null ? 0
						: ccmPeopleAmount.getRectificationAmount()); // 社区矫正总数量
				ccmPeopleAmount2.setReleaseAmount(
						ccmPeopleAmount.getReleaseAmount() == null ? 0 : ccmPeopleAmount.getReleaseAmount()); // 刑释总数量
				ccmPeopleAmount2.setDrugsAmount(
						ccmPeopleAmount.getDrugsAmount() == null ? 0 : ccmPeopleAmount.getDrugsAmount()); // 吸毒总数量
				ccmPeopleAmount2.setBehindAmount(
						ccmPeopleAmount.getBehindAmount() == null ? 0 : ccmPeopleAmount.getBehindAmount()); // 留守总数量
				ccmPeopleAmount2
						.setKymAmount(ccmPeopleAmount.getKymAmount() == null ? 0 : ccmPeopleAmount.getKymAmount()); // 重点青少年总数量
				ccmPeopleAmount2.setVisitAmount(
						ccmPeopleAmount.getVisitAmount() == null ? 0 : ccmPeopleAmount.getVisitAmount()); // 重点上访总数量
				ccmPeopleAmount2.setHeresyAmount(
						ccmPeopleAmount.getHeresyAmount() == null ? 0 : ccmPeopleAmount.getHeresyAmount()); // 涉教人员总数量
				ccmPeopleAmount2.setDangerousAmount(
						ccmPeopleAmount.getDangerousAmount() == null ? 0 : ccmPeopleAmount.getDangerousAmount()); // 危险品从业人员总数量
				ccmPeopleAmount2.setAgeChild(ccmPeopleAmount.getAgeChild() == null ? 0 : ccmPeopleAmount.getAgeChild()); // 0-15年龄段
				ccmPeopleAmount2.setAgeAdult(ccmPeopleAmount.getAgeAdult() == null ? 0 : ccmPeopleAmount.getAgeAdult()); // 16-40年龄段
				ccmPeopleAmount2
						.setAgeMiddle(ccmPeopleAmount.getAgeMiddle() == null ? 0 : ccmPeopleAmount.getAgeMiddle()); // 41-64年龄段
				ccmPeopleAmount2.setAgeOld(ccmPeopleAmount.getAgeOld() == null ? 0 : ccmPeopleAmount.getAgeOld()); // 65及以上年龄段
				ccmPeopleAmount2
						.setAgeNewborn(ccmPeopleAmount.getAgeNewborn() == null ? 0 : ccmPeopleAmount.getAgeNewborn()); // 一岁以下新生儿
				ccmPeopleAmount2.setSexMale(ccmPeopleAmount.getSexMale() == null ? 0 : ccmPeopleAmount.getSexMale()); // 男性总数
				ccmPeopleAmount2
						.setSexFemale(ccmPeopleAmount.getSexFemale() == null ? 0 : ccmPeopleAmount.getSexFemale()); // 女性总数
				ccmPeopleAmount2.setSexMaleSingle(
						ccmPeopleAmount.getSexMaleSingle() == null ? 0 : ccmPeopleAmount.getSexMaleSingle()); // 未婚男性总数
				ccmPeopleAmount2.setSexFemaleSingle(
						ccmPeopleAmount.getSexFemaleSingle() == null ? 0 : ccmPeopleAmount.getSexFemaleSingle()); // 未婚女性总数
				ccmPeopleAmount2
						.setEduDoctor(ccmPeopleAmount.getEduDoctor() == null ? 0 : ccmPeopleAmount.getEduDoctor()); // 博士及以上
				ccmPeopleAmount2
						.setEduMaster(ccmPeopleAmount.getEduMaster() == null ? 0 : ccmPeopleAmount.getEduMaster()); // 研究生
				ccmPeopleAmount2
						.setEduCollege(ccmPeopleAmount.getEduCollege() == null ? 0 : ccmPeopleAmount.getEduCollege()); // 大学
				ccmPeopleAmount2
						.setEduSenior(ccmPeopleAmount.getEduSenior() == null ? 0 : ccmPeopleAmount.getEduSenior()); // 高中
				ccmPeopleAmount2
						.setEduJunior(ccmPeopleAmount.getEduJunior() == null ? 0 : ccmPeopleAmount.getEduJunior()); // 初中及以下
				ccmPeopleAmount2.setAtteHigh(ccmPeopleAmount.getAtteHigh() == null ? 0 : ccmPeopleAmount.getAtteHigh()); // 关注程度-高
				ccmPeopleAmount2
						.setAtteMiddle(ccmPeopleAmount.getAtteMiddle() == null ? 0 : ccmPeopleAmount.getAtteMiddle()); // 关注程度-中
				ccmPeopleAmount2.setAtteLow(ccmPeopleAmount.getAtteLow() == null ? 0 : ccmPeopleAmount.getAtteLow()); // 关注程度-低
				ccmPeopleAmount2.setNativeFloating(
						ccmPeopleAmount.getNativeFloating() == null ? "100000" : ccmPeopleAmount.getNativeFloating()); // 流动人员来源地
				ccmPeopleAmount = ccmPeopleAmount2;

				//
				popAll = ccmPeopleAmount.getPersonAmount() + ccmPeopleAmount.getOverseaAmount()
						+ ccmPeopleAmount.getFloatAmount() + ccmPeopleAmount.getUnsettleAmount();// 首页社区弹框：人口总数

				sexScale = ccmPeopleAmount.getSexMale() / (ccmPeopleAmount.getSexFemale() * 1.0);// 首页社区弹框：人口结构的男女比例

				emphasisPopAll = ccmPeopleAmount.getAidsAmount() + ccmPeopleAmount.getPsychogenyAmount()
						+ ccmPeopleAmount.getRectificationAmount() + ccmPeopleAmount.getReleaseAmount()
						+ ccmPeopleAmount.getDrugsAmount() + ccmPeopleAmount.getVisitAmount()
						+ ccmPeopleAmount.getHeresyAmount() + ccmPeopleAmount.getDangerousAmount();// 首页社区弹框：重点人口总人次

			} else {
				CcmPeopleAmount ccmPeopleAmount2 = new CcmPeopleAmount();
				ccmPeopleAmount2.setId("100000");
				ccmPeopleAmount2.setArea(area); // 区域id
				ccmPeopleAmount2.setPersonAmount(0); // 户籍总数量
				ccmPeopleAmount2.setOverseaAmount(0); // 外籍总数量
				ccmPeopleAmount2.setFloatAmount(0); // 流动总数量
				ccmPeopleAmount2.setUnsettleAmount(0); // 未落户总数量
				ccmPeopleAmount2.setPermanentAmount(0); // 常住总数量
				ccmPeopleAmount2.setAidsAmount(0); // 艾滋病患者总数量
				ccmPeopleAmount2.setPsychogenyAmount(0); // 肇事肇祸等严重精神障碍患者总数量
				ccmPeopleAmount2.setRectificationAmount(0);// 社区矫正总数量
				ccmPeopleAmount2.setReleaseAmount(0); // 刑释总数量
				ccmPeopleAmount2.setDrugsAmount(0); // 吸毒总数量
				ccmPeopleAmount2.setBehindAmount(0); // 留守总数量
				ccmPeopleAmount2.setKymAmount(0); // 重点青少年总数量
				ccmPeopleAmount2.setVisitAmount(0); // 重点上访总数量
				ccmPeopleAmount2.setHeresyAmount(0); // 涉教人员总数量
				ccmPeopleAmount2.setDangerousAmount(0); // 危险品从业人员总数量
				ccmPeopleAmount2.setAgeChild(0); // 0-15年龄段
				ccmPeopleAmount2.setAgeAdult(0); // 16-40年龄段
				ccmPeopleAmount2.setAgeMiddle(0); // 41-64年龄段
				ccmPeopleAmount2.setAgeOld(0); // 65及以上年龄段
				ccmPeopleAmount2.setAgeNewborn(0); // 一岁以下新生儿
				ccmPeopleAmount2.setSexMale(0); // 男性总数
				ccmPeopleAmount2.setSexFemale(0); // 女性总数
				ccmPeopleAmount2.setSexMaleSingle(0); // 未婚男性总数
				ccmPeopleAmount2.setSexFemaleSingle(0); // 未婚女性总数
				ccmPeopleAmount2.setEduDoctor(0); // 博士及以上
				ccmPeopleAmount2.setEduMaster(0); // 研究生
				ccmPeopleAmount2.setEduCollege(0); // 大学
				ccmPeopleAmount2.setEduSenior(0); // 高中
				ccmPeopleAmount2.setEduJunior(0); // 初中及以下
				ccmPeopleAmount2.setAtteHigh(0); // 关注程度-高
				ccmPeopleAmount2.setAtteMiddle(0); // 关注程度-中
				ccmPeopleAmount2.setAtteLow(0); // 关注程度-低
				ccmPeopleAmount2.setNativeFloating("100000"); // 流动人员来源地
				ccmPeopleAmount = ccmPeopleAmount2;
			}

			String sexScale1 = String.format("%.2f", sexScale);// 首页社区弹框：人口结构的男女比例
			sexScale = Double.valueOf(sexScale1);// 首页社区弹框：人口结构的男女比例

			double areaNew = 0;
			double popPop = 0;
			if (ccmOrgArea != null) {
				if (ccmOrgArea.getNetArea() != null) {
					areaNew = ccmOrgArea.getNetArea() / 1000000;// 区域面积
				}
				/*
				 * if(ccmOrgArea.getMannum()!=null){ popPop = ccmOrgArea.getMannum() /
				 * (ccmOrgArea.getNetPeoNum() * 1.0);// 工作负荷指数 }
				 */
				if (ccmOrgArea.getNetPeoNum() != null && ccmOrgArea.getNetPeoNum() != 0) {
					popPop = emphasisPopAll / (ccmOrgArea.getNetPeoNum() * 1.0);// 工作负荷指数
				}

			}

			int popArea = 0;
			if (areaNew != 0) {
				popArea = (int) (popAll / areaNew);// 人口密度
			}

			String areaNew1 = String.format("%.2f", areaNew);// 区域面积
			areaNew = Double.valueOf(areaNew1);// 区域面积
			String popPop1 = String.format("%.2f", popPop);// 工作负荷指数
			popPop = Double.valueOf(popPop1);// 工作负荷指数
			//
			// double BuildmanageAreaPop = 0;
			// if(popAll!=0){
			// BuildmanageAreaPop = BuildmanageArea / popAll;// 人均住房面积
			// }
			//
			// String BuildmanageAreaPop1 = String.format("%.2f", BuildmanageAreaPop);//
			// 人均住房面积
			// BuildmanageAreaPop = Double.valueOf(BuildmanageAreaPop1);// 人均住房面积
			//
			//
			int ccmPeopleStatAll = 0;
			if (ccmPeopleStat != null) {
				if (ccmPeopleStat.getPersonNew() != null) {
					ccmPeopleStatAll += ccmPeopleStat.getPersonNew();// 首页社区弹框：本月新增人口
				}
				if (ccmPeopleStat.getFloatNew() != null) {
					ccmPeopleStatAll += ccmPeopleStat.getFloatNew();// 首页社区弹框：本月新增人口
				}
				if (ccmPeopleStat.getOverseaNew() != null) {
					ccmPeopleStatAll += ccmPeopleStat.getOverseaNew();// 首页社区弹框：本月新增人口
				}
				if (ccmPeopleStat.getUnsettleNew() != null) {
					ccmPeopleStatAll += ccmPeopleStat.getUnsettleNew();// 首页社区弹框：本月新增人口
				}

			}
			/*
			 * else{ CcmPeopleStat ccmPeopleStat2 = new CcmPeopleStat();
			 * ccmPeopleStat2.setId("100000"); ccmPeopleStat = ccmPeopleStat2; }
			 */
			//
			// int listCcmPopTenantNum = listCcmPopTenant.size();// 首页社区弹框:出租屋总数
			//
			model.addAttribute("popAll", popAll);// 首页社区弹框：人口总数
			model.addAttribute("areaNew", areaNew);// 区域面积
			model.addAttribute("popArea", popArea);// 人口密度
			model.addAttribute("popPop", popPop);// 工作负荷指数
			model.addAttribute("ccmOrgArea", ccmOrgArea);// 区域外表
			model.addAttribute("area", area);// 区域
			// model.addAttribute("BuildmanageArea", BuildmanageArea);// 楼栋总面积
			// model.addAttribute("BuildmanageAreaPop", BuildmanageAreaPop);// 人均住房面积
			model.addAttribute("ccmPeopleAmount", ccmPeopleAmount);// 首页社区弹框：人口结构
			model.addAttribute("sexScale", sexScale);// 首页社区弹框：人口结构的男女比例
			model.addAttribute("emphasisPopAll", emphasisPopAll);// 首页社区弹框：重点人口总人次
			model.addAttribute("ccmPeopleStat", ccmPeopleStat);// 首页社区弹框：本月新增数据
			model.addAttribute("ccmPeopleStatAll", ccmPeopleStatAll);// 首页社区弹框：本月新增人口
			// model.addAttribute("listCcmPopTenant", listCcmPopTenant);// 首页社区弹框:出租屋数据
			// model.addAttribute("listCcmPopTenantNum", listCcmPopTenantNum);//
			// 首页社区弹框:出租屋总数
			model.addAttribute("forecast", forecast);// 首页社区弹框:预测下个月人口总数
			model.addAttribute("subForecast", subForecast);// 首页社区弹框:预测下个月人口变化

		}

		// return "/modules/sys/map/statPop";
		return "/modules/mapping/houseBuild/mapArea";
	}

	// getNetAreaForm社区选择网格
	@RequestMapping(value = "getNetAreaForm")
	public String getNetAreaForm(CcmPeople ccmPeople, Model model) {
		String areaIds = ccmPeople.getUsedname();// 社区id
		String areaNets = ccmPeople.getName();// 网格id
		Area area = new Area();
		area = areaService.get(areaNets);
		model.addAttribute("areaIds", areaIds);
		model.addAttribute("area", area);
		return "/ccm/pop/area/netArea";
	}

	// getHouseAreaForm网格选择房屋
	@RequestMapping(value = "getHouseAreaForm")
	public String getHouseAreaForm(CcmPeople ccmPeople, Model model) {
		String netIds = ccmPeople.getUsedname();// 网格id
		String areaHouses = ccmPeople.getName();// 房屋id
		CcmPopTenant ccmPopTenant = new CcmPopTenant();
		ccmPopTenant = ccmPopTenantService.get(areaHouses);// 房屋
		model.addAttribute("netIds", netIds);
		model.addAttribute("ccmPopTenant", ccmPopTenant);
		return "/ccm/pop/area/houseArea";
	}

	// 返回相关信息
	@RequestMapping(value = "getMapPopListIndex")
	public String getMapPopListIndex(List<CcmPeople> list, Model model) {
		System.out.println(list.size());
		return adminPath;
	}

	// 返回相关内容
	@RequestMapping(value = "getMapPopSingleIndex")
	public String getMapPopSingleIndex(CcmPeople ccmPeople, Model model) {

		return adminPath;
	}

	// 从房屋查看人员列表
	@RequestMapping(value = "getPeoListByHouse")
	public String getPeoListByHouse(@RequestParam(required = false) String type,
			@RequestParam(required = false) String houseId, @RequestParam(required = false) String buildId,
			HttpServletRequest request, HttpServletResponse response, Model model, String netId) {
		// 人员查询Dto
		CcmPeople ccmPeopleDto = new CcmPeople();
		// 获取房屋ID
		CcmPopTenant ccmPopTenant = new CcmPopTenant();
		ccmPopTenant.setId(houseId);
		ccmPeopleDto.setRoomId(ccmPopTenant);
		// 查询 人员列表
		Page<CcmPeople> page = ccmPeopleService.findPage(new Page<CcmPeople>(request, response), ccmPeopleDto);

		List<CcmPeople> list = page.getList();
		//
		CcmPeople ccmPeople2 = new CcmPeople();
		String[] listLimite = new String[list.size()];
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				listLimite[i] = list.get(i).getId();
			}
			ccmPeople2.setListLimite(listLimite);
			List<CcmPeople> list2 = ccmPeopleService.findListLimite(ccmPeople2);// 数组查询id
			page.setList(list2);
		}
		// 向页面 传递值
		model.addAttribute("page", page);
		model.addAttribute("houseId", houseId);
		model.addAttribute("buildId", buildId);
		model.addAttribute("netId", netId);
		// 通过 房屋进行查询
		if ("house".equals(type)) {
			model.addAttribute("PeoTypeBy", "ByHouse");
		} else {
			model.addAttribute("PeoTypeBy", "ByHouse_Build");
		}
		return "ccm/pop/popByHouse/ccmPeopleListForHouse";
	}

	// 从房屋查看人员表单
	@RequestMapping(value = "getPeoFromByHouse")
	public String getPeoFromByHouse(@RequestParam(required = false) String type,
			@RequestParam(required = false) String houseId, @RequestParam(required = false) String buildId,
			CcmPeople ccmPeople, HttpServletRequest request, HttpServletResponse response, Model model) {
		// 人员查询Dto
		CcmLogTail ccmLogTailDto = new CcmLogTail();
		ccmLogTailDto.setRelevanceId(ccmPeople.getId());
		ccmLogTailDto.setRelevanceTable("ccm_people");
		List<CcmLogTail> ccmLogTailList = ccmLogTailService.findListByObject(ccmLogTailDto);

		if (ccmPeople.getId() == null) {
			if (houseId != null && !"".equals(houseId)) {
				CcmPopTenant ccmPopTenant = new CcmPopTenant();
				ccmPopTenant.setId(houseId);
				ccmPopTenant = ccmPopTenantService.get(ccmPopTenant);
				if (ccmPopTenant != null && !"".equals(ccmPopTenant)) {
					ccmPeople.setRoomId(ccmPopTenant);// 房屋ID
					CcmHouseBuildmanage ccmHouseBuildmanage = new CcmHouseBuildmanage();
					if (ccmPopTenant.getBuildingId() != null && !"".equals(ccmPopTenant.getBuildingId())) {
						if (ccmPopTenant.getBuildingId().getId() != null
								&& !"".equals(ccmPopTenant.getBuildingId().getId())) {
							ccmHouseBuildmanage.setId(ccmPopTenant.getBuildingId().getId());
							ccmHouseBuildmanage = ccmHouseBuildmanageService.get(ccmHouseBuildmanage);// 楼栋
							if (ccmHouseBuildmanage != null && !"".equals(ccmHouseBuildmanage)) {
								if (ccmHouseBuildmanage.getArea() != null
										&& !"".equals(ccmHouseBuildmanage.getArea())) {
									if (ccmHouseBuildmanage.getArea().getId() != null
											&& !"".equals(ccmHouseBuildmanage.getArea().getId())) {
										Area areaGridId = new Area();
										areaGridId.setId(ccmHouseBuildmanage.getArea().getId());
										areaGridId = areaService.get(areaGridId);
										if (areaGridId != null && !"".equals(areaGridId)) {
											ccmPeople.setAreaGridId(areaGridId);// 网格ID
											Area areaComId = new Area();
											if (areaGridId.getParentId() != null
													&& !"".equals(areaGridId.getParentId())) {
												areaComId.setId(areaGridId.getParentId());
												areaComId = areaService.get(areaComId);
												ccmPeople.setAreaComId(areaComId);// 社区ID
											}

										}

									}
								}

							}
						}
					}

				}
			}
		}

		// 返回查询结果
		model.addAttribute("ccmLogTailList", ccmLogTailList);
		model.addAttribute("ccmPeople", ccmPeople);
		model.addAttribute("houseId", houseId);
		model.addAttribute("buildId", buildId);
		// 通过 房屋进行查询
		if (("house").equals(type)) {
			model.addAttribute("PeoTypeBy", "ByHouse");
		} else {
			model.addAttribute("PeoTypeBy", "ByHouse_Build");
		}
		return "ccm/pop/popByHouse/ccmPeopleFormForHouse";
	}

	// 人员批量添加-房屋
	@RequestMapping(value = "listPopAdd")
	public String listPopAdd(@RequestParam(required = false) String houseId, CcmPeople ccmPeople,
			HttpServletRequest request, HttpServletResponse response, Model model) {

		Page<CcmPeople> page = ccmPeopleService.findPage(new Page<CcmPeople>(request, response), ccmPeople);

		List<CcmPeople> list = page.getList();
		//
		CcmPeople ccmPeople2 = new CcmPeople();
		String[] listLimite = new String[list.size()];
		if (list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				listLimite[i] = list.get(i).getId();
			}
			ccmPeople2.setListLimite(listLimite);
			List<CcmPeople> list2 = ccmPeopleService.findListLimite(ccmPeople2);// 数组查询id
			page.setList(list2);
		}

		model.addAttribute("page", page);
		model.addAttribute("ccmPeople", ccmPeople);
		model.addAttribute("houseId", houseId);

		return "ccm/pop/ccmPeopleListAdd";
	}

	// 人员批量添加保存-房屋
	@ResponseBody
	@RequestMapping(value = "savePopAdd")
	public List<String> savePopAdd(@RequestParam(required = false) String houseId, CcmPeople ccmPeople, Model model,
			RedirectAttributes redirectAttributes) {

		ccmPeople = ccmPeopleService.get(ccmPeople.getId());

		if (houseId != null && !"".equals(houseId)) {
			CcmPopTenant ccmPopTenant = new CcmPopTenant();
			ccmPopTenant.setId(houseId);
			ccmPopTenant = ccmPopTenantService.get(ccmPopTenant);// 房屋
			if (ccmPopTenant != null && !"".equals(ccmPopTenant)) {
				ccmPeople.setRoomId(ccmPopTenant);// 写入房屋ID
				CcmHouseBuildmanage ccmHouseBuildmanage = new CcmHouseBuildmanage();
				if (ccmPopTenant.getBuildingId() != null && !"".equals(ccmPopTenant.getBuildingId())) {
					if (ccmPopTenant.getBuildingId().getId() != null
							&& !"".equals(ccmPopTenant.getBuildingId().getId())) {
						ccmHouseBuildmanage.setId(ccmPopTenant.getBuildingId().getId());
						ccmHouseBuildmanage = ccmHouseBuildmanageService.get(ccmHouseBuildmanage);// 楼栋
						if (ccmHouseBuildmanage != null && !"".equals(ccmHouseBuildmanage)) {
							ccmPeople.setBuildId(ccmHouseBuildmanage);// 写入楼栋ID
							if (ccmHouseBuildmanage.getArea() != null && !"".equals(ccmHouseBuildmanage.getArea())) {
								if (ccmHouseBuildmanage.getArea().getId() != null
										&& !"".equals(ccmHouseBuildmanage.getArea().getId())) {
									Area areaGridId = new Area();
									areaGridId.setId(ccmHouseBuildmanage.getArea().getId());
									areaGridId = areaService.get(areaGridId);// 网格
									if (areaGridId != null && !"".equals(areaGridId)) {
										ccmPeople.setAreaGridId(areaGridId);// 写入网格ID
										Area areaComId = new Area();
										if (areaGridId.getParentId() != null && !"".equals(areaGridId.getParentId())) {
											areaComId.setId(areaGridId.getParentId());
											areaComId = areaService.get(areaComId);// 社区
											ccmPeople.setAreaComId(areaComId);// 写入社区ID
										}

									}

								}
							}

						}
					}
				}

			}
		}

		ccmPeopleService.save(ccmPeople);
		addMessage(redirectAttributes, "添加成员成功");

		// 把添加的人员记录到租客记录表里面
		CcmTenantRecord ccmTenantRecord = new CcmTenantRecord();
		ccmTenantRecord.setHouseId(houseId);
		ccmTenantRecord.setIdCard(ccmPeople.getIdent());
		ccmTenantRecord.setName(ccmPeople.getName());
		ccmTenantRecord.setPhoneNumber(ccmPeople.getTelephone());
		ccmTenantRecord.setCreateDate(new Date());
		ccmTenantRecord.setLiveDate(new Date());
		ccmTenantRecord.setLeaveDate(new Date());
		ccmTenantRecordService.save(ccmTenantRecord);

		List<String> list = new ArrayList<>();
		list.add(ccmPeople.getId());
		list.add("添加成员成功");
		return list;
	}

	/**
	 * @see 保存人口返回房屋页面列表
	 * @param ccmPeople
	 * @param model
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "saveByHouse")
	public String saveByHouse(CcmPeople ccmPeople, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ccmPeople)) {
			return form(ccmPeople, model);
		}
		// 注入楼栋id
		if (ccmPeople.getRoomId() != null && ccmPeople.getRoomId().getId() != null
				&& !"".equals(ccmPeople.getRoomId().getId())) {
			CcmPopTenant ccmPopTenant = ccmPopTenantService.get(ccmPeople.getRoomId().getId());
			if (ccmPopTenant != null && ccmPopTenant.getBuildingId() != null
					&& ccmPopTenant.getBuildingId().getId() != null && ccmPopTenant.getBuildingId().getId() != "") {
				ccmPeople.setBuildId(ccmPopTenant.getBuildingId());
			}
		}
		ccmPeopleService.save(ccmPeople);
		addMessage(redirectAttributes, "保存实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/getPeoListByHouse?houseId="
				+ ccmPeople.getRoomId().getId() + "&type=house&repage";
	}

	// 删除人口返回房屋页面列表
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "deleteByHouse")
	public String deleteByHouse(CcmPeople ccmPeople, RedirectAttributes redirectAttributes) {
		ccmPeopleService.delete(ccmPeople);
		addMessage(redirectAttributes, "删除实有人口成功");
		return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/getPeoListByHouse?houseId="
				+ ccmPeople.getRoomId().getId() + "&type=house&repage";
	}

	// 批量添加的移除人员
	@RequiresPermissions("pop:ccmPeople:edit")
	@RequestMapping(value = "deletePeople")
	public String deletePeople(String id, String type, String houseId, String buildId, String netId,
			RedirectAttributes redirectAttributes) {
		CcmPeople ccmPeople = new CcmPeople();
		ccmPeople = ccmPeopleService.get(id);
		String houseIdString = ccmPeople.getRoomId().getId();
		// ccmPeopleService.delete(ccmPeople);
		CcmPopTenant ccmPopTenant = new CcmPopTenant(); // 移除房屋ID
		ccmPeople.setRoomId(ccmPopTenant);
		ccmPeopleService.save(ccmPeople);
		// 修改记录表离开时间
		CcmTenantRecord ccmTenantRecord = new CcmTenantRecord();
		ccmTenantRecord.setHouseId(houseIdString);
		ccmTenantRecord.setIdCard(ccmPeople.getIdent());
		List<CcmTenantRecord> list = ccmTenantRecordService.findList(ccmTenantRecord);

		if (list.size() != 0) {
			for (int i = 0; i < list.size(); i++) {
				for (int j = 0; j < list.size() - i - 1; j++) {// 注意第二重循环的条件 
					long a =list.get(j).getLiveDate().getTime();
					long b = list.get(j + 1).getLiveDate().getTime();
					if (a > b) {
						CcmTenantRecord temp = list.get(j);
						list.set(j, list.get(j + 1));
						list.set(j + 1, temp);
					}
				}
			}
			CcmTenantRecord ccmTenantRecord2 = list.get(list.size() - 1);
			ccmTenantRecord2.setLeaveDate(new Date());
			ccmTenantRecordService.save(ccmTenantRecord2);
		}

		/*if (ccmTenantRecordList.size() != 0) {
			for (CcmTenantRecord ccmTenantRecord2 : ccmTenantRecordList) {
				ccmTenantRecord2.setLeaveDate(new Date());
				ccmTenantRecordService.save(ccmTenantRecord2);
			}
		}*/
		addMessage(redirectAttributes, "移除成员成功");
		if ("ByHouse".equals(type)) {
			return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/getPeoListByHouse?houseId=" + houseIdString
					+ "&type=house&repage";
		} else {
			return "redirect:" + Global.getAdminPath() + "/pop/ccmPeople/getPeoListByHouse?houseId=" + houseId
					+ "&type=houseBuild&buildId=" + buildId + "&netId=" + netId + "&repage";
		}
	}

	/**
	 * 重点人员社交关系（家庭、同住）信息弹框
	 * 
	 * @author pengjianqiang
	 * @version 2018-07-22
	 */
	@RequestMapping(value = "getSocialConnections")
	public String getSocialConnections(CcmPeople ccmPeople, Model model) {
		/**** 户籍家庭成员 ****/
		ccmPeople = ccmPeopleService.getHousePopForm(ccmPeople);
		model.addAttribute("ccmPeople", ccmPeople);
		List<CcmPeople> listAccount = new ArrayList<CcmPeople>();
		if (!StringUtils.isBlank(ccmPeople.getAccount())) {
			listAccount = ccmPeopleService.listAccount(ccmPeople);
		}
		model.addAttribute("listAccount", listAccount);

		/**** 同一房屋人员 ****/
		List<CcmPeople> listRoomPeople = new ArrayList<CcmPeople>();
		if (!StringUtils.isBlank(ccmPeople.getRoomIdString())) {
			listRoomPeople = ccmPeopleService.getHousePopList(ccmPeople);
		}
		model.addAttribute("listRoomPeople", listRoomPeople);

		return "ccm/pop/ccmPeopleSocialConnections";
	}

}