package com.arjjs.ccm.modules.ccm.rest.web;

import com.arjjs.ccm.common.web.BaseController;
import com.arjjs.ccm.modules.ccm.rest.entity.*;
import com.arjjs.ccm.modules.flat.alarm.entity.BphAlarmInfo;
import com.arjjs.ccm.modules.flat.alarm.service.BphAlarmInfoService;
import com.arjjs.ccm.modules.flat.alarmhandlelog.entity.BphAlarmHandleLog;
import com.arjjs.ccm.modules.flat.alarmhandlelog.service.BphAlarmHandleLogService;
import com.arjjs.ccm.modules.flat.handle.entity.AlarmHandleDayInfo;
import com.arjjs.ccm.modules.flat.handle.entity.BphAlarmHandle;
import com.arjjs.ccm.modules.flat.handle.service.BphAlarmHandleService;
import com.arjjs.ccm.modules.sys.entity.Office;
import com.arjjs.ccm.modules.sys.entity.User;
import com.arjjs.ccm.modules.sys.utils.UserUtils;
import groovy.util.logging.Slf4j;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.IOException;
import java.util.Date;
import java.util.List;

/**
 * 指挥调度app
 * @author maoxiaobin
 * @version 2019-11-28
 * @author maoxiaobin
 * @version 2019-11-28 警情的查询，更新
 */
@RestController
@RequestMapping(value = "${appPath}/rest/bphAlarmService")
@Api(description = "指挥调度-警情相关-app接口类")
@Slf4j
public class CcmRestBphAlarm extends BaseController {
	

	@Autowired
	private BphAlarmHandleService handleService;
	@Autowired
	BphAlarmInfoService bphAlarmInfoService;
	@Autowired
	BphAlarmHandleLogService bphAlarmHandleLogService;

	/**
	 * 接处警（查询用户当天警情列表接口）
	 * @param req
	 * @param resp
	 * @return
	 * @throws IOException
	 * @author maoxb
	 * @version 2019-10-10
	 */
	@ApiOperation(value = "1、接处警（查询用户当天警情列表接口）")
	@RequestMapping(value = "/queryDayAlarmInfoList", method = RequestMethod.POST)
	public CcmRestResult queryDayAlarmInfoList(@RequestBody @Valid CcmBphReceiveAlarmVo receiveAlarmVo , HttpServletRequest req, HttpServletResponse resp) {
		logger.info("当前正在执行的类名为》》》"+Thread.currentThread().getStackTrace()[1].getClassName());
		logger.info("当前正在执行的方法名为》》》"+Thread.currentThread().getStackTrace()[1].getMethodName());
		CcmRestResult result = new CcmRestResult();
		User sessionUser = (User) req.getSession().getAttribute("user");
		if (sessionUser== null) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		String sessionUserId = sessionUser.getId();
		if (receiveAlarmVo.getUserId()== null || "".equals(receiveAlarmVo.getUserId()) ||!receiveAlarmVo.getUserId().equals(sessionUserId)) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		List<AlarmHandleDayInfo> alarmInfoAndHandles = handleService.queryDayAlarmList(receiveAlarmVo);
		result.setCode(CcmRestType.OK);
		result.setResult(alarmInfoAndHandles);
		return result;
	}
	/**
	 * 接处警（查询处警详情接口）
	 * @param req
	 * @param resp
	 * @return
	 * @throws IOException
	 * @author maoxb
	 * @version 2019-10-10
	 */
	@ApiOperation(value = "2、接处警（查询处警详情接口）")
	@RequestMapping(value = "/queryAlarmHandleInfo", method = RequestMethod.POST)
	public CcmRestResult queryAlarmHandleInfo(@RequestBody @Valid CcmBphDetailAlarmVo detailAlarmVo , HttpServletRequest req, HttpServletResponse resp) {
		logger.info("当前正在执行的类名为》》》"+Thread.currentThread().getStackTrace()[1].getClassName());
		logger.info("当前正在执行的方法名为》》》"+Thread.currentThread().getStackTrace()[1].getMethodName());
		CcmRestResult result = new CcmRestResult();
		User sessionUser = (User) req.getSession().getAttribute("user");
		if (sessionUser== null) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		String sessionUserId = sessionUser.getId();
		if (detailAlarmVo.getUserId()== null || "".equals(detailAlarmVo.getUserId()) ||!detailAlarmVo.getUserId().equals(sessionUserId)) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		AlarmHandleInfo alarmHandleInfo = handleService.queryAlarmHandleInfo(detailAlarmVo.getAlarmId(),detailAlarmVo.getHandlePoliceId());
		result.setCode(CcmRestType.OK);
		result.setResult(alarmHandleInfo);
		return result;
	}
	/**
	 * 签收-到达-反馈（更新处警信息）
	 * @param req
	 * @param resp
	 * @return
	 * @throws IOException
	 * @author maoxb
	 * @version 2019-10-10
	 */
	@ApiOperation(value = "3、接处警 签收-到达-反馈（更新处警信息）")
	@RequestMapping(value = "/updateAlarmHandleById", method = RequestMethod.POST)
/*	@ApiImplicitParams({@ApiImplicitParam(name = "handlePoliceId", value = "处警人id", paramType = "form", required = true),
			@ApiImplicitParam(name = "handleStatus", value = "警情状态", paramType = "form", required = true)})*/
	public CcmRestResult updateAlarmHandleById(@RequestBody @Valid CcmBphUpdateAlarmVo updateAlarmVo, HttpServletRequest req, HttpServletResponse resp) {
		logger.info("当前正在执行的类名为》》》"+Thread.currentThread().getStackTrace()[1].getClassName());
		logger.info("当前正在执行的方法名为》》》"+Thread.currentThread().getStackTrace()[1].getMethodName());
		CcmRestResult result = new CcmRestResult();
		User sessionUser = (User) req.getSession().getAttribute("user");
		if (sessionUser== null) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		String sessionUserId = sessionUser.getId();
		if (updateAlarmVo.getUserId()== null || "".equals(updateAlarmVo.getUserId()) ||!updateAlarmVo.getUserId().equals(sessionUserId)) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		User userInfo = UserUtils.get(updateAlarmVo.getUserId());
		//
		//修改处理过程
		BphAlarmHandle bphAlarmHandle = new BphAlarmHandle();
		BeanUtils.copyProperties(updateAlarmVo,bphAlarmHandle);
		int updateNum = handleService.updateAlarmHandleById(bphAlarmHandle);
		if (updateNum > 0) {
			//修改警情
			//一条警情派发给多个人时，如果一个人先把警情反馈，则警情状态为反馈状态，其它人在后处理的过程中警情状态保持为反馈状态；
			BphAlarmInfo alarmInfo = bphAlarmInfoService.get(updateAlarmVo.getAlarmId());
			if (alarmInfo != null) {
				if (alarmInfo.getState() != "3") { //反馈状态
					alarmInfo.setState(updateAlarmVo.getStatus());
					if (updateAlarmVo.getArriveX() != null && updateAlarmVo.getArriveY() != null) {
						//log.debug("更新任务状态信息接口 反馈坐标状态x - y  : " + updateAlarmVo.getArriveX() + " - " + updateAlarmVo.getArriveY());
						if (updateAlarmVo.getArriveX() != "0.0" && updateAlarmVo.getArriveY() != "0.0") {
							alarmInfo.setX(Double.parseDouble(updateAlarmVo.getArriveX()));
							alarmInfo.setY(Double.parseDouble(updateAlarmVo.getArriveY()));
						}
					}
				}
				alarmInfo.setGenreCode(updateAlarmVo.getAlarmGenerCode());//案件类别
				alarmInfo.setTypeCode(updateAlarmVo.getAlarmTypeCode());//案件类型
				alarmInfo.setClassCode(updateAlarmVo.getAlarmSmallTypeCode());//案件细类
				alarmInfo.setOfficeId(userInfo.getOffice().getId());  //更新案件处理部门为处警人部门
				Office office = userInfo.getOffice();
				if (office != null) {
					alarmInfo.setOfficeIds(office.getParentIds());  //更新案件处理部门为处警人部门
				}
				bphAlarmInfoService.updateBphAlarmInfo(alarmInfo);
			}
			// 添加处警过程记录
			BphAlarmHandleLog log = new BphAlarmHandleLog();
			log.setAlarmId(updateAlarmVo.getAlarmId());
			log.setUser(userInfo);
			if ("0".equals(updateAlarmVo.getStatus())) {
				log.setOperateDesc(userInfo.getName() + " : 任务获取");
			}
			if ("1".equals(updateAlarmVo.getStatus())) {
				log.setOperateDesc(userInfo.getName() + " : 任务签收");
			}
			if ("2".equals(updateAlarmVo.getStatus())) {
				log.setOperateDesc(userInfo.getName() + " : 到达现场");
			}
			if ("3".equals(updateAlarmVo.getStatus())) {
				log.setOperateDesc(userInfo.getName() + " : 任务反馈");
			}
			log.setOperateTime(new Date());
			log.setCreateBy(userInfo);
			log.setUpdateBy(userInfo);
			bphAlarmHandleLogService.save(log);
			//查询本部门非当前人的处警I记录，进行删除 （签收之后删除同部门人的处警记录）
			/**-- 1、发送给一个部门的多个人，一个人签收，其它人看不到；
			 *-- 2、指军调度 指派给一个部门的人 多个人，这些人都必须处理；
			 *  基于1，2点都得满足，所以暂时不进行以下删除操作
			 * * */
			/*if(StringUtils.isNotBlank(updateAlarmVo.getStatus()) && "1".equals(updateAlarmVo.getStatus())){//签收状态
				List<CurrentOffAlarmHandleInfo> currentOffAlarmHandles = handleService.queryCurrentOffHandleByAlarmIdAndOffId(updateAlarmVo.getAlarmId(),userInfo.getId(),userInfo.getOffice().getId());
				for (CurrentOffAlarmHandleInfo handleInfo:currentOffAlarmHandles) {
					BphAlarmHandle handle = new BphAlarmHandle();
					handle.setId(handleInfo.getHandleId());
					handle.setDelFlag("1");
					handleService.delete(handle);
				}
			}*/
			result.setCode(CcmRestType.OK);
			result.setResult("成功");
			return result;
		}else{
			result.setCode(CcmRestType.ERROR_DB_EXCEPTION);
			result.setResult("数据库异常");
			return result;
		}
	}
}
