package com.arjjs.ccm.modules.ccm.rest.web;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.security.auth.login.FailedLoginException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.arjjs.ccm.common.gis.MapUtil;
import com.arjjs.ccm.common.gis.Point;
import com.arjjs.ccm.common.security.Digests;
import com.arjjs.ccm.common.utils.Encodes;
import com.arjjs.ccm.common.web.BaseController;
import com.arjjs.ccm.modules.ccm.ccmsys.entity.CcmMobileDevice;
import com.arjjs.ccm.modules.ccm.ccmsys.service.CcmMobileDeviceService;
import com.arjjs.ccm.modules.ccm.event.entity.CcmAlarmLog;
import com.arjjs.ccm.modules.ccm.event.service.CcmAlarmLogService;
import com.arjjs.ccm.modules.ccm.org.entity.CcmOrgTeam;
import com.arjjs.ccm.modules.ccm.org.service.CcmOrgTeamService;
import com.arjjs.ccm.modules.ccm.patrol.entity.CcmTracingpoint;
import com.arjjs.ccm.modules.ccm.patrol.service.CcmTracingpointService;
import com.arjjs.ccm.modules.ccm.rest.entity.CcmRestResult;
import com.arjjs.ccm.modules.ccm.rest.entity.CcmRestType;
import com.arjjs.ccm.modules.ccm.view.entity.VCcmTeam;
import com.arjjs.ccm.modules.sys.dao.UserDao;
import com.arjjs.ccm.modules.sys.entity.User;
import com.arjjs.ccm.tool.TransGPS;

/**
 * 登录接口类
 * 
 * @author fuxinshuang
 * @version 2018-0301
 */
@Controller
@RequestMapping(value = "${appPath}/rest/login")
public class CcmRestLogin extends BaseController {
	public static final int HASH_INTERATIONS = 1024;
	
	@Autowired
	private UserDao userDao;
	@Autowired
	private CcmOrgTeamService ccmOrgTeamService;
	@Autowired
	private CcmMobileDeviceService ccmMobileDeviceService;
	@Autowired
	private CcmTracingpointService ccmTracingpointService;
	@Autowired
	private CcmAlarmLogService ccmAlarmLogService;
	
	
	/**
	 * @see  登录
	 * @param loginName  用户名
	 * @param password  密码
	 * @return 
	 * @author fuxinshuang
	 * @version 2018-02-28
	 */
	@ResponseBody
	@RequestMapping(value="/login", method = RequestMethod.POST)
	public CcmRestResult get(CcmMobileDevice ccmMobileDevice,User user,HttpServletRequest req, HttpServletResponse resp) throws IOException {
		CcmRestResult result = new CcmRestResult();
		
		if (user.getLoginName() == null || "".equals(user.getLoginName())) {//登录名为空
			result.setCode(CcmRestType.ERROR_NO_LOGINNAME);
			return result;
		}
		if (user.getPassword() == null || "".equals(user.getPassword())) {//登录密码为空
			result.setCode(CcmRestType.ERROR_NO_PASSWORD);
			return result;
		}
		User userDB = userDao.getByLoginName(user);
		if (!validatePassword(user.getPassword(), userDB.getPassword())) {
			result.setCode(CcmRestType.ERROR_NO_USER);
			return result;
		}
		CcmOrgTeam ccmOrgTeam = ccmOrgTeamService.findUserId(userDB.getId());
		if (ccmOrgTeam == null) {
			ccmOrgTeam = new CcmOrgTeam();
			ccmOrgTeam.setUser(userDB);
			ccmOrgTeam.setCreateBy(userDB);
			ccmOrgTeam.setUpdateBy(userDB);
		}
		ccmOrgTeam.setStatus("online");
		ccmOrgTeamService.save(ccmOrgTeam);
		
		
		if (ccmMobileDevice != null && ccmMobileDevice.getDeviceId() != null && !"".equals(ccmMobileDevice.getDeviceId())) {//手机App的处理
			CcmMobileDevice ccmMobileDeviceDB = ccmMobileDeviceService.findByDeviceId(ccmMobileDevice.getDeviceId());
			if (ccmMobileDeviceDB == null){
				ccmMobileDeviceDB = new CcmMobileDevice();
				ccmMobileDeviceDB.setDeviceId(ccmMobileDevice.getDeviceId());
				ccmMobileDeviceDB.setCreateBy(userDB);
				ccmMobileDeviceDB.setIcon("");
				ccmMobileDeviceDB.setIsVariable("01");
				ccmMobileDeviceDB.setvCcmTeam(new VCcmTeam(userDB.getId()));
				ccmMobileDeviceDB.setUpdateBy(userDB);
				ccmMobileDeviceService.save(ccmMobileDeviceDB);
				result.setCode(CcmRestType.ERROR_NO_PERSSION);
				return result;
			}else{
				String isVariable = ccmMobileDeviceDB.getIsVariable();
				if(!"02".equals(isVariable)){
					result.setCode(CcmRestType.ERROR_NO_PERSSION);
					return result;
				}
			}
			ccmMobileDeviceDB.setvCcmTeam(new VCcmTeam(userDB.getId()));

			//坐标经纬度的转换（百度坐标 -> 标准坐标）
			String piont = ccmMobileDevice.getAreaPoint();
			String areaPiont = "";
			if (!"".equals(piont) && null != piont) {
				String[] pionts = piont.split(",");
				TransGPS ins = new TransGPS();
				ins.setBaidulng(Double.parseDouble(pionts[0]));
				ins.setBaidulat(Double.parseDouble(pionts[1]));
				areaPiont = ins.zhuanhuan();
			}
			ccmMobileDeviceDB.setAreaPoint(areaPiont);
			
			ccmMobileDeviceDB.setUpdateBy(userDB);
			ccmMobileDeviceService.save(ccmMobileDeviceDB);
		}
		
		req.getSession().setAttribute("user", userDB);
		result.setCode(CcmRestType.OK);
		result.setResult(userDB);     
		return result;
	}
	/**
	 * @see  退出
	 * @param loginName  用户名
	 * @param password  密码
	 * @return 
	 * @author fuxinshuang
	 * @version 2018-02-28
	 */
	@ResponseBody
	@RequestMapping(value="/logout", method = RequestMethod.GET)
	public CcmRestResult logout(String userId,HttpServletRequest req, HttpServletResponse resp) throws IOException {
		CcmRestResult result = new CcmRestResult();
		User sessionUser = (User) req.getSession().getAttribute("user");
		if (sessionUser== null) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		String sessionUserId = sessionUser.getId();
		if (userId== null || "".equals(userId) ||!userId.equals(sessionUserId)) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		
		CcmOrgTeam ccmOrgTeam = ccmOrgTeamService.findUserId(userId);
		ccmOrgTeam.setStatus("hide");
		ccmOrgTeamService.save(ccmOrgTeam);
		req.getSession().removeAttribute("user");
		result.setCode(CcmRestType.OK);
		result.setResult("成功");     
		return result;
	}
	/**
	 * @see  更新坐标信息
	 * @param loginName  用户名
	 * @param password  密码
	 * @return 
	 * @author fuxinshuang
	 * @version 2018-02-28
	 */
	@ResponseBody
	@RequestMapping(value="/updateLocation", method = RequestMethod.POST)
	public CcmRestResult updateLocation(String userId,CcmMobileDevice ccmMobileDevice,HttpServletRequest req, HttpServletResponse resp) throws IOException {
		CcmRestResult result = new CcmRestResult();
		User sessionUser = (User) req.getSession().getAttribute("user");
		if (sessionUser== null) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		String sessionUserId = sessionUser.getId();
		if (userId== null || "".equals(userId) ||!userId.equals(sessionUserId)) {
			result.setCode(CcmRestType.ERROR_USER_NOT_EXIST);
			return result;
		}
		//向移动设备表存入数据
		CcmMobileDevice ccmMobileDeviceDB = ccmMobileDeviceService.findByDeviceId(ccmMobileDevice.getDeviceId());
		ccmMobileDeviceDB.setvCcmTeam(new VCcmTeam(sessionUser.getId()));
		
		//坐标经纬度的转换（百度坐标 -> 标准坐标）
		String piont = ccmMobileDevice.getAreaPoint();
		String areaPiont = "";
		if (!"".equals(piont) && null != piont) {
			String[] pionts = piont.split(",");
			TransGPS ins = new TransGPS();
			ins.setBaidulng(Double.parseDouble(pionts[0]));
			ins.setBaidulat(Double.parseDouble(pionts[1]));
			areaPiont = ins.zhuanhuan();
		}
		ccmMobileDeviceDB.setAreaPoint(areaPiont);
		
		ccmMobileDeviceDB.setUpdateBy(sessionUser);
		ccmMobileDeviceDB.setIsAlarm("0");//是否越界-否
		
		//向巡逻点位表存入数据
		CcmTracingpoint ccmTracingpoint = new CcmTracingpoint();
//		ccmTracingpoint.setAreaPoint(ccmMobileDevice.getAreaPoint());
		ccmTracingpoint.setAreaPoint(areaPiont);
		ccmTracingpoint.setUser(sessionUser);
		ccmTracingpoint.setDeviceId(ccmMobileDevice.getDeviceId());
		if (ccmTracingpoint.getIsNewRecord()) {
			User userDto = new User(userId);
			ccmTracingpoint.setCreateBy(userDto);
			ccmTracingpoint.setUpdateBy(userDto);
		}
		ccmTracingpoint.setCurDate(new Date());
		ccmTracingpoint.setUser(new User(userId));
		ccmTracingpointService.save(ccmTracingpoint);
		
		//判断是否越界告警
		String eFenceScope = ccmMobileDeviceDB.getEfenceScope();
		if (!"".equals(eFenceScope) && null != eFenceScope) {//存在电子围栏设置时
			String[] points = areaPiont.split(",");
			Point pointApp = new Point(Double.parseDouble(points[0]), Double.parseDouble(points[1]));//app点位

			//电子围栏区域
			List<Point> eFencePointList = new ArrayList<>();
			String[] eFencePoints = eFenceScope.split(";");
			for (int i = 0; i < eFencePoints.length; i++) {
				Point point = new Point(Double.parseDouble(eFencePoints[i].split(",")[0]), Double.parseDouble(eFencePoints[i].split(",")[1]));
				eFencePointList.add(point);
			}
			MapUtil mu=new MapUtil();
			boolean isPointInPolygon = mu.isPointInPolygon(pointApp, eFencePointList);//在围栏里面返回true，不报警，false则报警
			if (!isPointInPolygon) {
				CcmAlarmLog ccmAlarmLog = new CcmAlarmLog();
				ccmAlarmLog.setAlarmType("01");
				ccmAlarmLog.setObjTable("ccm_mobile_device");
				ccmAlarmLog.setObjId(ccmMobileDevice.getDeviceId());//存放设备ID
				User userDto = new User(userId);
				ccmAlarmLog.setCreateBy(userDto);//用户
				ccmAlarmLog.setUpdateBy(userDto);
				ccmAlarmLog.setCreateDate(new Date());
				ccmAlarmLog.setUpdateDate(new Date());
				ccmAlarmLog.setDelFlag("0");
				ccmAlarmLog.setParam(ccmMobileDeviceDB.getId());//存放记录ID
				List<CcmAlarmLog> listOverstep = ccmAlarmLogService.findListOverstep(ccmAlarmLog);//查找判断是否越界告警
				for(CcmAlarmLog l:listOverstep){
					CcmAlarmLog ccmAlarmLog2 = new CcmAlarmLog();
					ccmAlarmLog2 = ccmAlarmLog;
					ccmAlarmLog2.setId(l.getId());//id
					ccmAlarmLog2.setCreateDate(l.getCreateDate());//开始时间
					ccmAlarmLogService.save(ccmAlarmLog2);//修改
				}
				if(listOverstep.size()==0){
					ccmAlarmLogService.save(ccmAlarmLog);//保存
				}

				ccmMobileDeviceDB.setIsAlarm("1");//是否越界-是
				
			}
		}

		ccmMobileDeviceService.save(ccmMobileDeviceDB);//保存移动设备管理
		
		result.setCode(CcmRestType.OK);
		result.setResult("成功");     
		return result;
	}
	
	/**
	 * 验证密码
	 * @param plainPassword 明文密码
	 * @param password 密文密码
	 * @return 验证成功返回true
	 */
	public static boolean validatePassword(String plainPassword, String password) {
		String plain = Encodes.unescapeHtml(plainPassword);
		byte[] salt = Encodes.decodeHex(password.substring(0,16));
		byte[] hashPassword = Digests.sha1(plain.getBytes(), salt, HASH_INTERATIONS);
		return password.equals(Encodes.encodeHex(salt)+Encodes.encodeHex(hashPassword));
	}
	
	

}